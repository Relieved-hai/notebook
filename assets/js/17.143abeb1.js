(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{1196:function(s,t,a){"use strict";a.r(t);var n=a(19),r=Object(n.a)({},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"贪婪量词和惰性量词"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#贪婪量词和惰性量词","aria-hidden":"true"}},[s._v("#")]),s._v(" 贪婪量词和惰性量词")]),s._v(" "),n("p",[s._v("量词，看上去十分简单，但实际上它可能会很棘手。")]),s._v(" "),n("p",[s._v("如果我们打算寻找比 "),n("code",{staticClass:"pattern"},[s._v("/\\d+/")]),s._v(" 更加复杂的东西，就需要理解搜索工作是如何进行的。")]),s._v(" "),n("br"),s._v(" "),n("p",[s._v("以接下来的问题为例。")]),s._v(" "),n("p",[s._v("有一个文本，我们需要用书名号："),n("code",[s._v("«...»")]),s._v(" 来代替所有的引号 "),n("code",[s._v('"..."')]),s._v("。在许多国家，它们是排版的首选。")]),s._v(" "),n("p",[s._v("例如："),n("code",[s._v('"Hello, world"')]),s._v(" 将会变成 "),n("code",[s._v("«Hello, world»")]),s._v("。")]),s._v(" "),n("p",[s._v("一些国家偏爱 "),n("code",[s._v("„Witam, świat!”")]),s._v("（波兰语）甚至 "),n("code",[s._v("「你好，世界」")]),s._v("（汉语）引号。对于不同的语言环境，我们可以选择不同的替代方式，但它们都是一样的，那我们就以书名号 "),n("code",[s._v("«...»")]),s._v(" 开始。")]),s._v(" "),n("p",[s._v("为了进行替换，我们首先要找出所有被引号围起来的子串。")]),s._v(" "),n("p",[s._v("正则表达式看上去可能是这样的："),n("code",{staticClass:"pattern"},[s._v('/".+"/g')]),s._v("。这个表达式的意思是：我们要查找这样一个句子，一个引号后跟一个或多个字符，然后以另一个引号结尾。")]),s._v(" "),n("p",[s._v("…但如果我们试着在一个如此简单的例子中去应用它…")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v('/".+"/g')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'a "witch" and her "broom" is one\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "witch" and her "broom"')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("…我们会发现它的运行结果与预期不同！")]),s._v(" "),n("p",[s._v("它直接找到了一个匹配结果："),n("code",{staticClass:"match"},[s._v('"witch" and her "broom"')]),s._v("，而不是找到两个匹配结果 "),n("code",{staticClass:"match"},[s._v('"witch"')]),s._v(" 和 "),n("code",{staticClass:"match"},[s._v('"broom"')]),s._v("。")]),s._v(" "),n("p",[s._v("这可被称为“贪婪是万恶之源”。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"贪婪搜索"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#贪婪搜索","aria-hidden":"true"}},[s._v("#")]),s._v(" 贪婪搜索")]),s._v(" "),n("p",[s._v("为了查找到一个匹配项，正则表达式引擎采用了以下算法：")]),s._v(" "),n("ul",[n("li",[s._v("对于字符串中的每一个字符\n"),n("ul",[n("li",[s._v("用这个模式来匹配此字符。")]),s._v(" "),n("li",[s._v("若无匹配，移至下一个字符")])])])]),s._v(" "),n("p",[s._v("这些简单的词语没有说清楚为什么这个正则表达式匹配失败了，因此，让我们详细说明一下模式 "),n("code",{staticClass:"pattern"},[s._v('".+"')]),s._v(" 是如何进行搜索工作的。")]),s._v(" "),n("br"),s._v(" "),n("ul",[n("li",[n("ol",[n("li",[s._v("该模式的第一个字符是一个引号 "),n("code",{staticClass:"pattern"},[s._v('"')]),s._v("。")])]),s._v(" "),n("p",[s._v("正则表达式引擎企图在字符串 "),n("code",{staticClass:"subject"},[s._v('a "witch" and her "broom" is one')]),s._v(" 的第一个位置就匹配到目标，但这个位置是 "),n("code",{staticClass:"subject"},[s._v("a")]),s._v("，所以匹配失败。")]),s._v(" "),n("p",[s._v("然后它进行下一步：移至字符串中的下一个位置，并试图匹配模式中的第一个字符，最终在第三个位置匹配到了引号：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(353),alt:""}})])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("检测到了引号后，引擎就尝试去匹配模式中的剩余字符。它试图查看剩余的字符串主体是否符合 "),n("code",{staticClass:"pattern"},[s._v('.+"')]),s._v("。")])]),s._v(" "),n("p",[s._v("在我们的用例中，模式中的下一个字符为 "),n("code",{staticClass:"pattern"},[s._v(".")]),s._v("（一个点）。它表示匹配除了换行符之外的任意字符，所以将会匹配下一个字符 "),n("code",{staticClass:"match"},[s._v("'w'")]),s._v("：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(354),alt:""}})])]),s._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[s._v("然后因为量词 "),n("code",{staticClass:"pattern"},[s._v(".+")]),s._v("，模式中的点（.）将会重复。正则表达式引擎逐一读取字符，当该字符可能匹配时就用它来构建匹配项。")])]),s._v(" "),n("p",[s._v("…什么时候会不匹配？点（.）能够匹配所有字符，所以只有在移至字符串末尾时才停止匹配：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(620),alt:""}})])]),s._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[s._v("现在引擎完成了对重复模式 "),n("code",{staticClass:"pattern"},[s._v(".+")]),s._v(" 的搜索，并且试图寻找模式中的下一个字符。这个字符是引号 "),n("code",{staticClass:"pattern"},[s._v('"')]),s._v("。但还有一个问题，对字符串的遍历已经结束，已经没有更多的字符了！")])]),s._v(" "),n("p",[s._v("正则表达式引擎明白它已经为 "),n("code",{staticClass:"pattern"},[s._v(".+")]),s._v(" 匹配了太多项了，所以开始 "),n("strong",[s._v("回溯")]),s._v(" 了。")]),s._v(" "),n("p",[s._v("换句话说，它去掉了量词的匹配项的最后一个字符：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(621),alt:""}})]),s._v(" "),n("p",[s._v("现在它假设在结束前，"),n("code",{staticClass:"pattern"},[s._v(".+")]),s._v(" 会匹配一个字符，并尝试匹配剩余的字符。")]),s._v(" "),n("p",[s._v("如果出现了一个引号，就表示到达了末尾，但最后一个字符是 "),n("code",{staticClass:"subject"},[s._v("'e'")]),s._v("，所以无法匹配。")])]),s._v(" "),n("li",[n("ol",{attrs:{start:"5"}},[n("li",[s._v("…所以引擎会再去掉一个字符，以此来减少 "),n("code",{staticClass:"pattern"},[s._v(".+")]),s._v(" 的重复次数：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(622),alt:""}})]),s._v(" "),n("p",[n("code",{staticClass:"pattern"},[s._v("'\"'")]),s._v(" 并不会匹配 "),n("code",{staticClass:"subject"},[s._v("'n'")]),s._v("。")])]),s._v(" "),n("li",[n("ol",{attrs:{start:"6"}},[n("li",[s._v("引擎不断进行回溯：它减少了 "),n("code",{staticClass:"pattern"},[s._v("'.'")]),s._v(" 的重复次数，直到模式的其它部分（在我们的用例中是 "),n("code",{staticClass:"pattern"},[s._v("'\"'")]),s._v("）匹配到结果：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(623),alt:""}})])]),s._v(" "),n("li",[n("ol",{attrs:{start:"7"}},[n("li",[s._v("匹配完成。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"8"}},[n("li",[s._v("所以，第一次匹配是 "),n("code",{staticClass:"match"},[s._v('"witch" and her "broom"')]),s._v("。接下来的搜索的起点位于第一次搜索的终点，但在 "),n("code",{staticClass:"subject"},[s._v("is one")]),s._v(" 中没有更多的引号了，所以没有其它的结果了。")])])])]),s._v(" "),n("p",[s._v("这可能不是我们所想要的，但这就是它的工作原理。")]),s._v(" "),n("br"),s._v(" "),n("p",[n("strong",[s._v("在贪婪模式下（默认情况下），量词都会尽可能地重复多次。")])]),s._v(" "),n("br"),s._v(" "),n("p",[s._v("正则表达式引擎尝试用 "),n("code",{staticClass:"pattern"},[s._v(".+")]),s._v(" 去获取尽可能多的字符，然后再一步步地筛选它们。")]),s._v(" "),n("p",[s._v("对于这个问题，我们想要另一种结果，这也就是懒惰量词模式的用途。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"懒惰模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#懒惰模式","aria-hidden":"true"}},[s._v("#")]),s._v(" 懒惰模式")]),s._v(" "),n("p",[s._v("懒惰模式中的量词与贪婪模式中的是相反的。它想要“重复最少次数”。")]),s._v(" "),n("p",[s._v("我们能够通过在量词之后添加一个问号 "),n("code",{staticClass:"pattern"},[s._v("'?'")]),s._v(" 来启用它，所以匹配模式变为 "),n("code",{staticClass:"pattern"},[s._v("*?")]),s._v(" 或 "),n("code",{staticClass:"pattern"},[s._v("+?")]),s._v("，甚至将 "),n("code",{staticClass:"pattern"},[s._v("'?'")]),s._v(" 变为 "),n("code",{staticClass:"pattern"},[s._v("??")])]),s._v(" "),n("p",[s._v("这么说吧：通常，一个问号 "),n("code",{staticClass:"pattern"},[s._v("?")]),s._v(" 就是一个它本身的量词（0 或 1），但如果添加"),n("strong",[s._v("另一个量词（甚至可以是它自己）")]),s._v("，就会有不同的意思 —— 它将匹配的模式从贪婪转为懒惰。")]),s._v(" "),n("p",[s._v("正则表达式 "),n("code",{staticClass:"pattern"},[s._v('/".+?"/g')]),s._v(" 正如预期工作：它找到了 "),n("code",{staticClass:"match"},[s._v('"witch"')]),s._v(" 和 "),n("code",{staticClass:"match"},[s._v('"broom"')]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v('/".+?"/g')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'a "witch" and her "broom" is one\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// witch, broom")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("br"),s._v(" "),n("p",[s._v("为了更清楚地理解这个变化，我们来一步步解析这个搜索过程。")]),s._v(" "),n("ul",[n("li",[n("ol",[n("li",[s._v("第一步依然相同：它在第三个位置开始 "),n("code",{staticClass:"pattern"},[s._v("'\"'")]),s._v("：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(353),alt:""}})])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("下一步也是类似的：引擎为 "),n("code",{staticClass:"pattern"},[s._v("'.'")]),s._v(" 找到了一个匹配项：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(354),alt:""}})])]),s._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[s._v("接下来就是搜索过程出现不同的时候了。因为我们对 "),n("code",{staticClass:"pattern"},[s._v("+?")]),s._v(" 启用了懒惰模式，引擎不会去尝试多匹配一个点，并且开始了对剩余的 "),n("code",{staticClass:"pattern"},[s._v("'\"'")]),s._v(" 的匹配：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(624),alt:""}})]),s._v(" "),n("p",[s._v("如果有一个引号，搜索就会停止，但是有一个 "),n("code",[s._v("'i'")]),s._v("，所以没有匹配到引号。")])]),s._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[s._v("接着，正则表达式引擎增加对点的重复搜索次数，并且再次尝试：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(625),alt:""}})]),s._v(" "),n("p",[s._v("又失败了。然后重复次数一次又一次的增加…")])]),s._v(" "),n("li",[n("ol",{attrs:{start:"5"}},[n("li",[s._v("…直到模式中的剩余部分找到匹配项：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(626),alt:""}})])]),s._v(" "),n("li",[n("ol",{attrs:{start:"6"}},[n("li",[s._v("接下来的搜索工作从当前匹配结束的那一项开始，就会再产生一个结果：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(627),alt:""}})])])]),s._v(" "),n("p",[s._v("在这个例子中，我们看到了懒惰模式 "),n("code",{staticClass:"pattern"},[s._v("+?")]),s._v(" 是怎样工作的。量词 "),n("code",{staticClass:"pattern"},[s._v("*?")]),s._v(" 和 "),n("code",{staticClass:"pattern"},[s._v("??")]),s._v(" 也有类似的效果 —— 只有在模式的剩余部分无法在给定位置匹配时，正则表达式引擎才会增加重复次数。")]),s._v(" "),n("br"),s._v(" "),n("p",[s._v("懒惰模式只能够通过带 "),n("code",[s._v("?")]),s._v(" 的量词启用")]),s._v(" "),n("br"),s._v(" "),n("p",[s._v("其它的量词依旧保持贪婪模式。")]),s._v(" "),n("p",[s._v("例如：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123 456"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\d+ \\d+?/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 123 4")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("ol",[n("li",[s._v("模式 "),n("code",{staticClass:"pattern"},[s._v("\\d+")]),s._v(" 尝试匹配尽可能多的数字（贪婪模式），因此在它找到 "),n("code",{staticClass:"match"},[s._v("123")]),s._v(" 时停止，因为下一个字符为空格 "),n("code",{staticClass:"pattern"},[s._v("' '")]),s._v("。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("匹配到一个空格。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[s._v("由于 "),n("code",{staticClass:"pattern"},[s._v("\\d+?")]),s._v("。量词是出于懒惰模式的，所以它匹配一个数字 "),n("code",{staticClass:"match"},[s._v("4")]),s._v(" 并且尝试去检测模式的剩余部分是否匹配。")])]),s._v(" "),n("p",[s._v("。。。但是在 "),n("code",{staticClass:"pattern"},[s._v("\\d+?")]),s._v(" 之后没有其它的匹配项了。")]),s._v(" "),n("p",[s._v("懒惰模式不会在不必要的情况下重复任何事情。模式结束，所以我们找到了匹配项 "),n("code",{staticClass:"match"},[s._v("123 4")]),s._v("。")])]),s._v(" "),n("li",[n("ol",{attrs:{start:"4"}},[n("li",[s._v("接下来的搜索工作从字符 "),n("code",[s._v("5")]),s._v(" 开始。")])])])]),s._v(" "),n("br"),s._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",[n("strong",[s._v("Optimizations")])]),s._v(" "),n("p",[s._v("当代的正则表达式引擎会通过优化内部算法来提升效率。所以它们的工作流程和所描述的算法可能略有不同。")]),s._v(" "),n("p",[s._v("但如果只是为了理解正则表达式是如何工作以及如何构建的，我们不需要知道这些，它们仅用于内部优化。")]),s._v(" "),n("p",[s._v("复杂的正则表达式是难以优化的，所以搜索的过程可能会完全按照描述进行。")])]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"替代方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#替代方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 替代方法")]),s._v(" "),n("p",[s._v("在正则表达式中，通常有多种方法来达到某个相同目的。")]),s._v(" "),n("p",[s._v("在用例中，我们能够在不启用懒惰模式的情况下用 "),n("code",{staticClass:"pattern"},[s._v('"[^"]+"')]),s._v(" 找到带引号的字符串：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v('/"[^"]+"/g')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'a "witch" and her "broom" is one\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// witch, broom")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("code",{staticClass:"pattern"},[s._v('"[^"]+"')]),s._v(" 得到了正确的答案，因为它查找一个引号 "),n("code",{staticClass:"pattern"},[s._v("'\"'")]),s._v("，后跟一个或多个非引号字符 "),n("code",{staticClass:"pattern"},[s._v('[^"]')]),s._v("，然后是结束的引号。")]),s._v(" "),n("p",[s._v("当引擎寻找 "),n("code",{staticClass:"pattern"},[s._v('[^"]+')]),s._v(" 时，它会在匹配到结束的引号时停止重复，这样就完成了。")]),s._v(" "),n("br"),s._v(" "),n("p",[s._v("请注意，这个逻辑并不能取代惰性量词！")]),s._v(" "),n("p",[s._v("这是不同的，我们有时需要这一个，有时却需要另一个。")]),s._v(" "),n("p",[s._v("让我们再来看一个使用惰性量词失败而使用这种方式正确的例子。")]),s._v(" "),n("br"),s._v(" "),n("p",[s._v("例如，我们想要找到 "),n("code",[s._v('<a href="..." class="doc">')]),s._v(" 形式的链接，或是任意 "),n("code",[s._v("href")]),s._v("。")]),s._v(" "),n("p",[s._v("该使用哪个正则表达式呢？")]),s._v(" "),n("p",[s._v("首先可能会想到："),n("code",{staticClass:"pattern"},[s._v('/<a href=".*" class="doc">/g')]),s._v("。")]),s._v(" "),n("p",[s._v("验证一下：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'...<a href="link" class="doc">...\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v('/<a href=".*" class="doc">/g')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Works!")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// <a href="link" class="doc">')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("…但如果文本中有多个链接呢？")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'...<a href="link1" class="doc">... <a href="link2" class="doc">...\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v('/<a href=".*" class="doc">/g')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Whoops! Two links in one match!")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// <a href="link1" class="doc">... <a href="link2" class="doc">')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("现在这个结果和我们的 “witches” 用例结果的错误原因是一样的。量词 "),n("code",{staticClass:"pattern"},[s._v(".*")]),s._v(" 占用太多字符了。")]),s._v(" "),n("p",[s._v("匹配结果如下：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("a href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"....................................."')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("a href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"link1"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("a href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"link2"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("br"),s._v(" "),n("p",[s._v("让我们启用惰性量词 "),n("code",{staticClass:"pattern"},[s._v(".*?")]),s._v(" 来修改模式：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'...<a href="link1" class="doc">... <a href="link2" class="doc">...\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v('/<a href=".*?" class="doc">/g')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 有效！")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// <a href="link1" class="doc">, <a href="link2" class="doc">')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("现在能成功了，有两个匹配项：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("a href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"....."')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("a href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"....."')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("a href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"link1"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("a href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"link2"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("br"),s._v(" "),n("p",[s._v("它的工作原理是 —— 在上述的解释之后，这应该是显而易见的。所以我们不停留在这些细节上，来再尝试一个例子：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'...<a href="link1" class="wrong">... <p style="" class="doc">...\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v('/<a href=".*?" class="doc">/g')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 错误！")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// <a href="link1" class="wrong">... <p style="" class="doc">')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("我们会发现，这个正则表达式不仅匹配了一个链接，还匹配了包含 "),n("code",[s._v("<p...>")]),s._v(" 的一段文本。")]),s._v(" "),n("p",[s._v("为什么？")]),s._v(" "),n("ul",[n("li",[n("ol",[n("li",[s._v("首先，正则表达式发现一个链接标签："),n("code",{staticClass:"match"},[s._v('<a href="')]),s._v("。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("然后它寻找 "),n("code",{staticClass:"pattern"},[s._v(".*?")]),s._v("，我们取一个字符，检查其是否与模式的剩余部分匹配，然后再取另一个。。。")])]),s._v(" "),n("p",[s._v("量词 "),n("code",{staticClass:"pattern"},[s._v(".*?")]),s._v(" 检测字符，直到 "),n("code",{staticClass:"match"},[s._v('class="doc">')]),s._v("。")]),s._v(" "),n("p",[s._v("…在哪里可以找到它呢？我们如果查看文本，就可以看到唯一的 "),n("code",{staticClass:"match"},[s._v('class="doc">')]),s._v(" 是在链接之后的，在 "),n("code",[s._v("<p>")]),s._v(" 中。")])]),s._v(" "),n("li",[n("ol",{attrs:{start:"3"}},[n("li",[s._v("所以有了如下匹配项：")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("a href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"..................................."')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("a href"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"link1"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wrong"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("p style"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doc"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])])]),s._v(" "),n("p",[s._v("所以，懒惰模式在这里不起作用。")]),s._v(" "),n("p",[s._v("我们需要寻找 "),n("code",[s._v('<a href="...something..." class="doc">')]),s._v("，但贪婪和懒惰模式都有一些问题。")]),s._v(" "),n("p",[s._v("正确的做法应该是这样的："),n("code",{staticClass:"pattern"},[s._v('href="[^"]*"')]),s._v("。它会获取 href 属性中的所有字符，正好符合我们的需求。")]),s._v(" "),n("p",[s._v("一个实例：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'...<a href="link1" class="wrong">... <p style="" class="doc">...\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'...<a href="link1" class="doc">... <a href="link2" class="doc">...\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v('/<a href="[^"]*" class="doc">/g')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Works!")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有匹配项，是正确的")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// <a href="link1" class="doc">, <a href="link2" class="doc">')]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("量词有两种工作模式：")]),s._v(" "),n("br"),s._v(" "),n("p",[n("strong",[s._v("贪婪模式")])]),s._v(" "),n("p",[s._v("默认情况下，正则表达式引擎会尝试尽可能多地重复量词。例如，"),n("code",{staticClass:"pattern"},[s._v("\\d+")]),s._v(" 检测所有可能的字符。当不可能检测更多（没有更多的字符或到达字符串末尾）时，然后它再匹配模式的剩余部分。如果没有匹配，则减少重复的次数（"),n("strong",[s._v("回溯")]),s._v("），并再次尝试。")]),s._v(" "),n("br"),s._v(" "),n("p",[n("strong",[s._v("懒惰模式")])]),s._v(" "),n("p",[s._v("通过在量词后添加问号 "),n("code",{staticClass:"pattern"},[s._v("?")]),s._v(" 来启用。在每次重复量词之前，引擎会尝试去匹配模式的剩余部分。")]),s._v(" "),n("p",[s._v("正如我们所见，懒惰模式并不是针对贪婪搜索的灵丹妙药。另一种方式是“微调”贪婪搜索，我们很快就会见到更多的例子。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子","aria-hidden":"true"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),n("h3",{attrs:{id:"查找-html-注释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查找-html-注释","aria-hidden":"true"}},[s._v("#")]),s._v(" 查找 HTML 注释")]),s._v(" "),n("p",[s._v("找出文本中的所有注释：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/你的正则表达式/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token string"}},[s._v("`... \x3c!-- My -- comment\n test --\x3e ..  \x3c!----\x3e ..\n`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '\x3c!-- My -- comment \\n test --\x3e', '\x3c!----\x3e'")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n  我们需要找到注释的起始位置 \x3c!--，然后获取字符直到注释的末尾 --\x3e。\n\n  首先想到的是 \x3c!--.*?--\x3e —— 惰性量词使得点（.）停在 --\x3e 之前。\n\n  但是在 Javascript 中，一个点（.）表示除换行符之外的任意字符。所以这是无法匹配多行注释的。\n\n  我们可以用 [\\s\\S]，而不是用点（.）来匹配“任何东西”：\n\n  reg = /\x3c!--[\\s\\S]*?--\x3e/g;\n* */")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("br"),s._v(" "),n("h3",{attrs:{id:"寻找-html-标签"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#寻找-html-标签","aria-hidden":"true"}},[s._v("#")]),s._v(" 寻找 HTML 标签")]),s._v(" "),n("p",[s._v("创建一个正则表达式语句来寻找所有具有其属性的（闭合或非闭合）HTML 标签。")]),s._v(" "),n("p",[s._v("用例：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/你的正则表达式/g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'<> <a href="/"> <input type="radio" checked> <b>\'')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '<a href=\"/\">', '<input type=\"radio\" checked>', '<b>'")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n  假设不包含 < 和 >（也包括引号），这将会简单许多。\n\n  reg = /<[^<>]+>/g;\n* */")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])])},[],!1,null,null,null);t.default=r.exports},353:function(s,t,a){s.exports=a.p+"assets/img/witch_greedy1.48812abe.svg"},354:function(s,t,a){s.exports=a.p+"assets/img/witch_greedy2.b4058146.svg"},620:function(s,t,a){s.exports=a.p+"assets/img/witch_greedy3.4d0b1107.svg"},621:function(s,t,a){s.exports=a.p+"assets/img/witch_greedy4.26b5f8f5.svg"},622:function(s,t,a){s.exports=a.p+"assets/img/witch_greedy5.f9fa6051.svg"},623:function(s,t,a){s.exports=a.p+"assets/img/witch_greedy6.2674e6db.svg"},624:function(s,t,a){s.exports=a.p+"assets/img/witch_lazy3.d053f925.svg"},625:function(s,t,a){s.exports=a.p+"assets/img/witch_lazy4.127d1e4a.svg"},626:function(s,t,a){s.exports=a.p+"assets/img/witch_lazy5.f2149923.svg"},627:function(s,t,a){s.exports=a.p+"assets/img/witch_lazy6.c8bc79a8.svg"}}]);