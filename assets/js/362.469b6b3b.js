(window.webpackJsonp=window.webpackJsonp||[]).push([[362],{1073:function(t,s,a){"use strict";a.r(s);var e=a(19),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"object-keys，values，entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-keys，values，entries","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.keys，values，entries")]),t._v(" "),a("p",[t._v("对各个数据结构的学习至此告一段落，下面让我们讨论一下如何迭代它们。")]),t._v(" "),a("p",[t._v("在前面的章节中，我们认识了 "),a("code",[t._v("map.keys()")]),t._v("，"),a("code",[t._v("map.values()")]),t._v(" 和 "),a("code",[t._v("map.entries()")]),t._v(" 方法。")]),t._v(" "),a("p",[t._v("这些方法是通用的，有一个共同的约定来将它们用于各种数据结构。如果我们创建一个我们自己的数据结构，我们也应该实现这些方法。")]),t._v(" "),a("p",[t._v("它们支持：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Map")])]),t._v(" "),a("li",[a("code",[t._v("Set")])]),t._v(" "),a("li",[a("code",[t._v("Array")])])]),t._v(" "),a("p",[t._v("普通对象也支持类似的方法，但是语法上有一些不同。")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"object-keys，values，entries-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-keys，values，entries-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.keys，values，entries")]),t._v(" "),a("p",[t._v("对于普通对象，下列这些方法是可用的：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object.keys(obj)")]),t._v(" —— 返回一个包含该对象所有的键的数组。")]),t._v(" "),a("li",[a("code",[t._v("Object.values(obj)")]),t._v(" —— 返回一个包含该对象所有的值的数组。")]),t._v(" "),a("li",[a("code",[t._v("Object.entries(obj)")]),t._v(" —— 返回一个包含该对象所有 [key, value] 键值对的数组。")])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("……但是请注意区别（比如说跟 map 的区别）：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[a("strong",[t._v("Map")])]),t._v(" "),a("th",[a("strong",[t._v("Object")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("调用语法")]),t._v(" "),a("td",[a("code",[t._v("map.keys()")])]),t._v(" "),a("td",[a("code",[t._v("Object.keys(obj)")]),t._v("，而不是 "),a("code",[t._v("obj.keys()")])])]),t._v(" "),a("tr",[a("td",[t._v("返回值")]),t._v(" "),a("td",[t._v("可迭代项")]),t._v(" "),a("td",[t._v('"真正的"数组')])])])]),t._v(" "),a("p",[t._v("第一个区别是，对于对象我们使用的调用语法是 "),a("code",[t._v("Object.keys(obj)")]),t._v("，而不是 "),a("code",[t._v("obj.keys()")]),t._v("。")]),t._v(" "),a("p",[t._v("为什么会这样？主要原因是灵活性。请记住，在 JavaScript 中，对象是所有复杂结构的基础。因此，我们可能有一个自己创建的对象，比如 data，并实现了它自己的 "),a("code",[t._v("data.values()")]),t._v(" 方法。同时，我们依然可以对它调用 "),a("code",[t._v("Object.values(data)")]),t._v(" 方法。")]),t._v(" "),a("p",[t._v("第二个区别是 "),a("code",[t._v("Object.*")]),t._v(" 方法返回的是“真正的”数组对象，而不只是一个可迭代项。这主要是历史原因。")]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("举个例子：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("ul",[a("li",[a("code",[t._v('Object.keys(user) = ["name", "age"]')])]),t._v(" "),a("li",[a("code",[t._v('Object.values(user) = ["John", 30]')])]),t._v(" "),a("li",[a("code",[t._v('Object.entries(user) = [ ["name","John"], ["age",30] ]')])])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("这里有一个使用 "),a("code",[t._v("Object.values")]),t._v(" 来遍历属性值的例子：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历所有的值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// John, then 30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("br"),t._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",[a("strong",[t._v("Object.keys/values/entries 会忽略 symbol 属性")])]),t._v(" "),a("p",[t._v("就像 "),a("code",[t._v("for..in")]),t._v(" 循环一样，这些方法会忽略使用 "),a("code",[t._v("Symbol(...)")]),t._v(" 作为键的属性。")]),t._v(" "),a("p",[t._v("通常这很方便。但是，如果我们也想要 Symbol 类型的键，那么这儿有一个单独的方法 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.getOwnPropertySymbols"),a("OutboundLink")],1),t._v("，它会返回一个只包含 Symbol 类型的键的数组。另外，还有一种方法 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reflect.ownKeys(obj)"),a("OutboundLink")],1),t._v("，它会返回 "),a("strong",[t._v("所有")]),t._v(" 键。")])]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"转换对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 转换对象")]),t._v(" "),a("p",[t._v("对象缺少数组存在的许多方法，例如 "),a("code",[t._v("map")]),t._v(" 和 "),a("code",[t._v("filter")]),t._v(" 等。")]),t._v(" "),a("p",[t._v("如果我们想应用它们，那么我们可以使用 "),a("code",[t._v("Object.entries")]),t._v("，然后使用 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries",target:"_blank",rel:"noopener noreferrer"}},[t._v("Object.fromEntries"),a("OutboundLink")],1),t._v("：")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("使用 "),a("code",[t._v("Object.entries(obj)")]),t._v(" 从 "),a("code",[t._v("obj")]),t._v(" 获取由键/值对组成的数组。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("对该数组使用数组方法，例如 "),a("code",[t._v("map")]),t._v("。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("对结果数组使用 "),a("code",[t._v("Object.fromEntries(array)")]),t._v(" 方法，将结果转回成对象。")])])])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("例如，我们有一个带有价格的对象，并想将它们加倍：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prices "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  banana"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  orange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  meat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" doublePrices "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromEntries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换为数组，之后使用 map 方法，然后通过 fromEntries 再转回到对象")]),t._v("\n  Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doublePrices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("meat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("乍一看，可能看起来很困难，但是使用一次或两次后，就很容易理解了。我们可以通过这种方式建立强大的转换链。")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("br")])},[],!1,null,null,null);s.default=n.exports}}]);