(window.webpackJsonp=window.webpackJsonp||[]).push([[373],{1029:function(s,t,a){"use strict";a.r(t);var e=a(19),n=Object(e.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"模式中的反向引用：-n-和-k-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式中的反向引用：-n-和-k-name","aria-hidden":"true"}},[s._v("#")]),s._v(" 模式中的反向引用：\\N 和 \\k<name>")]),s._v(" "),a("p",[s._v("我们不仅可以在结果或替换字符串中使用捕获组 "),a("code",{staticClass:"pattern"},[s._v("(...)")]),s._v(" 的内容，还可以在模式本身中使用它们。")]),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("h2",{attrs:{id:"按编号反向引用：-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按编号反向引用：-n","aria-hidden":"true"}},[s._v("#")]),s._v(" 按编号反向引用：\\N")]),s._v(" "),a("p",[s._v("可以使用 "),a("code",{staticClass:"pattern"},[s._v("\\N")]),s._v(" 在模式中引用一个组，其中 "),a("code",[s._v("N")]),s._v(" 是组号。")]),s._v(" "),a("p",[s._v("为了弄清那为什么有帮助，让我们考虑一项任务。")]),s._v(" "),a("p",[s._v("我们需要找到带引号的字符串：单引号 "),a("code",{staticClass:"subject"},[s._v("'...'")]),s._v(" 或双引号 "),a("code",{staticClass:"subject"},[s._v('"..."')]),s._v(" – 应匹配两种变体。")]),s._v(" "),a("p",[s._v("如何找到它们？")]),s._v(" "),a("p",[s._v("我们可以将两种引号放在方括号中："),a("code",{staticClass:"pattern"},[s._v("['\"](.*?)['\"]")]),s._v("，但它会找到带有混合引号的字符串，例如 "),a("code",{staticClass:"match"},[s._v("\"...'")]),s._v(" 和 "),a("code",{staticClass:"match"},[s._v("'...\"")]),s._v("。当一种引号出现在另一种引号内，比如在字符串 "),a("code",{staticClass:"subject"},[s._v('"She\'s the one!"')]),s._v(" 中时，便会导致不正确的匹配：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('`He said: "She\'s the one!".`')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" regexp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/['\"](.*?)['\"]/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不是我们想要的结果")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regexp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "She')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("如我们所见，该模式找到了一个开头的引号 "),a("code",{staticClass:"match"},[s._v('"')]),s._v("，然后文本被匹配，直到另一个引号 "),a("code",{staticClass:"match"},[s._v("'")]),s._v("，该匹配结束。")]),s._v(" "),a("br"),s._v(" "),a("p",[s._v("为了确保模式查找的结束引号与开始的引号完全相同，我们可以将其包装到捕获组中并对其进行反向引用："),a("code",{staticClass:"pattern"},[s._v("(['\"])(.*?)\\1")]),s._v("。")]),s._v(" "),a("p",[s._v("这是正确的代码：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('`He said: "She\'s the one!".`')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" regexp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(['\"])(.*?)\\1/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regexp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "She\'s the one!"')]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("现在可以了！正则表达式引擎会找到第一个引号 "),a("code",{staticClass:"pattern"},[s._v("(['\"])")]),s._v(" 并记住其内容。那是第一个捕获组。")]),s._v(" "),a("p",[a("code",{staticClass:"pattern"},[s._v("\\1")]),s._v(" 在模式中进一步的含义是“查找与第一（捕获）分组相同的文本”，在我们的示例中为完全相同的引号。")]),s._v(" "),a("p",[s._v("与此类似，"),a("code",{staticClass:"pattern"},[s._v("\\2")]),s._v(" 表示第二（捕获）分组的内容，"),a("code",{staticClass:"pattern"},[s._v("\\3")]),s._v(" – 第三分组，依此类推。")]),s._v(" "),a("br"),s._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[a("strong",[s._v("请注意：")])]),s._v(" "),a("p",[s._v("如果我们在组中使用 "),a("code",[s._v("?:")]),s._v("，那么我们将无法引用它。用 "),a("code",[s._v("(?:...)")]),s._v(" 捕获的组被排除，引擎不会存储。")])]),s._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",[a("strong",[s._v("不要搞混了： 在模式中用 "),a("code",{staticClass:"pattern"},[s._v("\\1")]),s._v("，在替换项中用："),a("code",{staticClass:"pattern"},[s._v("$1")])])]),s._v(" "),a("p",[s._v("在替换字符串中我们使用美元符号："),a("code",{staticClass:"pattern"},[s._v("$1")]),s._v("，而在模式中 – 使用反斜杠 "),a("code",{staticClass:"pattern"},[s._v("\\1")]),s._v("。")])]),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("h2",{attrs:{id:"按命名反向引用：-k-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按命名反向引用：-k-name","aria-hidden":"true"}},[s._v("#")]),s._v(" 按命名反向引用："),a("code",[s._v("\\k<name>")])]),s._v(" "),a("p",[s._v("如果正则表达式中有很多括号对（注：捕获组），给它们起个名字方便引用。")]),s._v(" "),a("p",[s._v("要引用命名组，我们可以使用："),a("code",{staticClass:"pattern"},[s._v("\\k<name>")]),s._v("。")]),s._v(" "),a("p",[s._v("在下面的示例中引号组命名为 "),a("code",{staticClass:"pattern"},[s._v("?<quote>")]),s._v("，因此反向引用为 "),a("code",{staticClass:"pattern"},[s._v("\\k<quote>")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('`He said: "She\'s the one!".`')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" regexp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<quote>['\"])(.*?)\\k<quote>/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regexp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "She\'s the one!"')]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("br"),s._v(" "),a("br"),s._v(" "),a("br")])},[],!1,null,null,null);t.default=n.exports}}]);