(window.webpackJsonp=window.webpackJsonp||[]).push([[445],{1094:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Java 是一种面向对象的语言")]),t._v(" "),a("h2",{attrs:{id:"什么是对象？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是对象？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是对象？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("万物皆对象、可以理解现实存在的客观事物都是对象。")])]),t._v(" "),a("li",[a("p",[t._v("对象：用来描述客观事物的一个实体，由一组属性和方法构成。")])])]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"什么是面向对象？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是面向对象？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是面向对象？")]),t._v(" "),a("p",[t._v("从字面上理解，就是与对象面对面，关注对象。从计算机的角度而言，可以理解为：是关注现实存在的事物的各方面的信息，从对象的角度出发，根据事物的特征进行程序设计。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("人关注对象")])]),t._v(" "),a("li",[a("p",[t._v("人关注事物信息")])])]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"类和对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类和对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 类和对象")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("类")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("所谓的类，是一个抽象的概念。")])]),t._v(" "),a("li",[a("p",[t._v("是一种类型的描述，它用来确定将会拥有的特征（ 属性 ）和行为（ 方法 ）（ "),a("code",[t._v("描述了一个模板，它限定了一种类型当中应该有什么，以及能做什么")]),t._v(" ）。")])]),t._v(" "),a("li",[a("p",[t._v("类是对象的类型。")])]),t._v(" "),a("li",[a("p",[t._v("是具有相同属性和方法的一组对象的集合。")])])])])]),t._v(" "),a("br"),t._v(" "),a("p",[a("strong",[t._v("定义类")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 类名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义属性部分")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("访问修饰符"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 数据类型 属性名；\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义方法部分")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("访问修饰符"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 返回类型 方法名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("br"),t._v(" "),a("ul",[a("li",[a("p",[t._v("对象")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("用来描述客观事物的一个实体，由一个类实例产生的具体体现（ "),a("code",[t._v("真正的看得见，摸得着，能干活的具体的实物")]),t._v(" ）。")])]),t._v(" "),a("li",[a("p",[t._v("对象是类的实例表现。")])]),t._v(" "),a("li",[a("p",[t._v("可以认为，对象是特定类型的数据。")])])])])]),t._v(" "),a("br"),t._v(" "),a("p",[a("strong",[t._v("创建并引用对象")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("类名 对象名 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" 构造方法"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n对象名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("属性名\n对象名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("方法名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("br"),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[t._v("在类的定义过程中。"),a("br")]),t._v(" "),a("p",[t._v("普通方法中定义的局部变量不赋值是不能使用的。"),a("br")]),t._v(" "),a("p",[t._v("而 Java 中类的成员属性，默认是有初始值的，是可以直接使用的。")])]),t._v(" "),a("br"),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("基本类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("byte")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("short")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0L")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0.0f")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("double")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("0.0d")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("char")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("'\\u0000'")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("false")])])])]),t._v(" "),a("p",[a("strong",[t._v("引用类型")]),t._v(" 对象的初始值 "),a("code",[t._v("null")])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("在实际开发中， 根据程序需求 -> 设计类 -> 实例化对象 -> 完成具体的程序逻辑")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性和方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 属性和方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("属性：对象具有的各种静态特征")]),t._v(" "),a("ul",[a("li",[t._v('"对象有什么"')])])]),t._v(" "),a("li",[a("p",[t._v("方法：对象具有的各种动态行为")]),t._v(" "),a("ul",[a("li",[t._v('"对象能做什么"')])])])]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"实例化对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例化对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 实例化对象")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 定义了一个类\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printIn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CarTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" cc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     cc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("br"),t._v(" "),a("br"),t._v(" "),a("h4",{attrs:{id:"实例化对象的过程："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例化对象的过程：","aria-hidden":"true"}},[t._v("#")]),t._v(" 实例化对象的过程：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1、声明对象 Cat cc。")]),t._v(" "),a("ul",[a("li",[t._v("在 "),a("strong",[t._v("栈")]),t._v(" 中开辟一个名为 "),a("code",[t._v("cc")]),t._v(" 的对象，值为 "),a("code",[t._v("null")]),t._v(" 的内存空间。")])])]),t._v(" "),a("li",[a("p",[t._v("2、用 "),a("code",[t._v("new")]),t._v(" 关键字，去实例化对象 "),a("code",[t._v("new Cat()")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("在 "),a("strong",[t._v("堆")]),t._v(" 中开辟一个新的空间进行实例化操作。")])])])]),t._v(" "),a("p",[t._v("在两个不同的空间中进行的，通过 "),a("code",[t._v("=")]),t._v(" 赋值，把 "),a("strong",[t._v("堆")]),t._v(" 中的内存地址指向 "),a("strong",[t._v("栈")]),t._v(" 中的对象，让两块内存进行关联。")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),a("blockquote",[a("p",[t._v("也称：构造函数、构造器")])]),t._v(" "),a("br"),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[t._v("是面向对象编程当中的一个重要的概念，我们经常会使用构造方法来完成对象初始化的相关设置。")])]),t._v(" "),a("br"),t._v(" "),a("blockquote",[a("p",[t._v("它也是 new 关键字的好搭档，它在类外被调用的时候，必须配合 new 关键字，是不能直接被对象单独调用的。")])]),t._v(" "),a("br"),t._v(" "),a("h4",{attrs:{id:"构造方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造方法-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("构造方法必须与类同名，且无返回值。")])]),t._v(" "),a("li",[a("p",[t._v("可以指定参数。")])]),t._v(" "),a("li",[a("p",[t._v("只会在对象实例化（ "),a("code",[t._v("new")]),t._v(" ）的时候调用。")])]),t._v(" "),a("li",[a("p",[t._v("当没有指定构造方法时，系统会自动添加无参的构造方法，反之，则不会添加。")])]),t._v(" "),a("li",[a("p",[t._v("一个类可以有多个构造方法。")])]),t._v(" "),a("li",[a("p",[t._v("构造方法是不能被类里的普通方法调用的。")])])]),t._v(" "),a("br"),t._v(" "),a("p",[a("code",[t._v("语句格式：")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 类名 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造方法名必须和类名一样")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" 构造方法名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("br"),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"this-关键字的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-关键字的用法","aria-hidden":"true"}},[t._v("#")]),t._v(" this 关键字的用法")]),t._v(" "),a("blockquote",[a("p",[t._v("this 在类中就是代表当前对象，可以通过 this 关键字完成当前对象的成员属性、成员方法和构造方法的调用。")])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("何时用 this ?")]),t._v(" "),a("p",[t._v("当在定义类中的方法时，如果需要调用该类对象，就可以用 this 来表示这个对象。也就是说，但凡在本类功能内部使用到了本类对象，都用 this 表示。至于代表哪个对象，就看其所在功能被哪个对象调用，这样就知道谁在参与运算。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printIn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是无参构造方法"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于构造方法间的相互调用，而且只能放在构造方法的第一行。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示调用本类中的无参构造方法。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果在构造方法里使用（ name = name ）,那么其是赋值给他本身，而不是赋值给类里面的属性 name。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this.name = zs.name")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里写着 zs，是因为 zs 这个对象在调用这个函数，一句话，谁调用它就在代表谁。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其实就等于 zs.method")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不推荐该写法")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// public void Cat() {")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//  System.out.printIn("我只是一个普通方法，名字也叫 Cat");')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printIn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"method 方法"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" zs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printIn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("zs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br")])]),a("br"),t._v(" "),a("p",[a("strong",[t._v("运行效果：")])]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("我是无参构造方法\nmethod 方法\n张三\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("br"),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"单一职责原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 单一职责原则")]),t._v(" "),a("p",[t._v("单一职责原则（ "),a("code",[t._v("SRP")]),t._v("："),a("code",[t._v("Single responsibility principle")]),t._v(" ）又称单一功能原则。")]),t._v(" "),a("p",[t._v("面向对象五个基本原则 "),a("code",[t._v("SOLID")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("SRP")]),t._v(" 单一责任原则（ "),a("code",[t._v("Single-Resposibility Principle")]),t._v(" ）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("OCP")]),t._v(" 开放封闭原则（ "),a("code",[t._v("Open-Closed principle")]),t._v(" ）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("LSP")]),t._v(" 里氏替换原则（ "),a("code",[t._v("Liskov-Substituion Principle")]),t._v(" ）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("ISP")]),t._v(" 接口分离原则（ "),a("code",[t._v("Interface-Segregation Principle")]),t._v(" ）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("DIP")]),t._v(" 依赖倒置原则（ "),a("code",[t._v("Dependecy-Inversion Principle")]),t._v(" ）")])])]),t._v(" "),a("br"),t._v(" "),a("blockquote",[a("p",[t._v("它规定一个类应该只有一个发生变化的原因。该原则由 "),a("code",[t._v("罗伯特·C·马丁（Robert C. Martin")]),t._v("）于"),a("code",[t._v("《敏捷软件开发：原则、模式和实践》")]),t._v("一书中给出的。马丁表示此原则是基于 "),a("code",[t._v("汤姆·狄马克(Tom DeMarco)")]),t._v(" 和 "),a("code",[t._v("Meilir Page-Jones")]),t._v(" 的著作中的内聚性原则发展出的。所谓职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。单一职责原则告诉我们：一个类不能太“累”！在软件系统中，一个类（大到模块，小到方法）承担的职责越多，它被复用的可能性就越小，而且一个类承担的职责过多，就相当于将这些职责耦合在一起，当其中一个职责变化时，可能会影响其他职责的运作，因此要将这些职责进行分离，将不同的职责封装在不同的类中，即将不同的变化原因封装在不同的类中，如果多个职责总是同时发生改变则可将它们封装在同一类中。")])]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("之所以会出现单一职责原则就是因为在软件设计时会出现以下类似场景：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。也就是说职责P1和P2被耦合在了一起。")])]),t._v(" "),a("li",[a("p",[t._v("解决办法：遵守单一职责原则，将不同的职责封装到不同的类或模块中。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这\n样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。")])])])])},[],!1,null,null,null);s.default=e.exports}}]);