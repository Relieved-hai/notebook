(window.webpackJsonp=window.webpackJsonp||[]).push([[369],{1045:function(s,t,a){"use strict";a.r(t);var n=a(19),e=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"flag-m-—-多行模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flag-m-—-多行模式","aria-hidden":"true"}},[s._v("#")]),s._v(' Flag "m" — 多行模式')]),s._v(" "),a("p",[s._v("通过 flag "),a("code",[s._v("/.../m")]),s._v(" 可以开启多行模式。")]),s._v(" "),a("p",[s._v("这仅仅会影响 "),a("code",[s._v("^")]),s._v(" 和 "),a("code",[s._v("$")]),s._v(" 锚符的行为。")]),s._v(" "),a("p",[s._v("在多行模式下，它们不仅仅匹配文本的开始与结束，还匹配每一行的开始与结束。")]),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("h2",{attrs:{id:"行的开头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行的开头","aria-hidden":"true"}},[s._v("#")]),s._v(" 行的开头 ^")]),s._v(" "),a("p",[s._v("在这个有多行文本的例子中，正则表达式 "),a("code",[s._v("/^\\d+/gm")]),s._v(" 将匹配每一行的开头数字（"),a("code",[s._v("+")]),s._v("：匹配前面的子表达式一次或多次）：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("`1st place: Winnie\n2nd place: Piglet\n33rd place: Eeyore`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^\\d+/gm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1, 2, 33")]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("没有 flag "),a("code",[s._v("/.../m")]),s._v(" 时，仅仅是第一个数字被匹配到：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("`1st place: Winnie\n2nd place: Piglet\n33rd place: Eeyore`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^\\d+/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这是因为默认情况下，锚符 "),a("code",[s._v("^")]),s._v(" 仅仅匹配文本的开头，在多行模式下，它匹配行的开头。")]),s._v(" "),a("p",[s._v("正则表达式引擎将会在文本中查找以锚符 "),a("code",[s._v("^")]),s._v(" 开始的字符串，我们找到之后继续匹配 "),a("code",[s._v("\\d+")]),s._v(" 模式。")]),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("h2",{attrs:{id:"行的结尾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行的结尾","aria-hidden":"true"}},[s._v("#")]),s._v(" 行的结尾 $")]),s._v(" "),a("p",[s._v("美元符 "),a("code",[s._v("$")]),s._v(" 行为也相似。")]),s._v(" "),a("p",[s._v("正则表达式 "),a("code",[s._v("\\w+$")]),s._v(" 会找到每一行的最后一个单词：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("`1st place: Winnie\n2nd place: Piglet\n33rd place: Eeyore`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\w+$/gim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Winnie,Piglet,Eeyore")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("没有 "),a("code",[s._v("/.../m")]),s._v(" flag 的话，美元符 "),a("code",[s._v("$")]),s._v(" 将会仅仅匹配整个文本的结尾，所以只有最后的一个单词会被找到。")]),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("h2",{attrs:{id:"锚符-对比-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锚符-对比-n","aria-hidden":"true"}},[s._v("#")]),s._v(" 锚符 ^$ 对比 \\n")]),s._v(" "),a("p",[s._v("要寻找新的一行的话，我们不仅可以使用锚符 "),a("code",[s._v("^")]),s._v(" 和 "),a("code",[s._v("$")]),s._v("，也可以使用换行符 "),a("code",[s._v("\\n")]),s._v("。")]),s._v(" "),a("p",[s._v("它和锚符 "),a("code",[s._v("^")]),s._v(" 和 "),a("code",[s._v("$")]),s._v(" 的第一个不同点是它不像锚符那样，它会“消耗”掉 "),a("code",[s._v("\\n")]),s._v(" 并且将其（"),a("code",[s._v("\\n")]),s._v("）加入到匹配结果中。")]),s._v(" "),a("p",[s._v("举个例子，我们在下面的代码中用它来替代 "),a("code",[s._v("$")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("`1st place: Winnie\n2nd place: Piglet\n33rd place: Eeyore`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\w+\\n/gim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Winnie\\n,Piglet\\n")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这里，我们每次匹配到的时候都会被添加一个换行符。")]),s._v(" "),a("p",[s._v("还有一个不同点——换行符 "),a("code",[s._v("\\n")]),s._v(" 不会匹配字符串结尾。这就是为什么在上面的例子中 "),a("code",[s._v("Eeyore")]),s._v(" 没有匹配到。")]),s._v(" "),a("p",[s._v("所以，通常情况下使用锚符更棒，用它匹配出来的结果更加接近我们想要的结果。")]),s._v(" "),a("br"),s._v(" "),a("br"),s._v(" "),a("br")])},[],!1,null,null,null);t.default=e.exports}}]);