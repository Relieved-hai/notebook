(window.webpackJsonp=window.webpackJsonp||[]).push([[374],{1197:function(s,a,t){"use strict";t.r(a);var n=t(19),e=Object(n.a)({},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"选择（or）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择（or）","aria-hidden":"true"}},[s._v("#")]),s._v(" 选择（OR）|")]),s._v(" "),t("p",[s._v("选择是正则表达式中的一个术语，实际上是一个简单的“或”。")]),s._v(" "),t("p",[s._v("在正则表达式中，它用竖线 "),t("code",{staticClass:"pattern"},[s._v("|")]),s._v(" 表示。")]),s._v(" "),t("br"),s._v(" "),t("p",[s._v("例如，我们需要找出编程语言：HTML、PHP、Java 或 JavaScript。")]),s._v(" "),t("p",[s._v("对应的正则表达式为："),t("code",{staticClass:"pattern"},[s._v("html|php|java(script)?")]),s._v("。")]),s._v(" "),t("p",[s._v("用例如下：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/html|php|css|java(script)?/gi")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"First HTML appeared, then CSS, then JavaScript"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 'HTML', 'CSS', 'JavaScript'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("我们已知的一个相似符号 —— 方括号。就允许在许多字符中进行选择，例如 "),t("code",{staticClass:"pattern"},[s._v("gr[ae]y")]),s._v(" 匹配 "),t("code",{staticClass:"match"},[s._v("gray")]),s._v(" 或 "),t("code",{staticClass:"match"},[s._v("grey")]),s._v("。")]),s._v(" "),t("p",[s._v("选择符号并非在字符级别生效，而是在表达式级别。正则表达式 "),t("code",{staticClass:"pattern"},[s._v("A|B|C")]),s._v(" 意思是命中 "),t("code",[s._v("A")]),s._v("、"),t("code",[s._v("B")]),s._v(" 或 "),t("code",[s._v("C")]),s._v(" 其一均可。")]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("ul",[t("li",[t("code",{staticClass:"pattern"},[s._v("gr(a|e)y")]),s._v(" 严格等同 "),t("code",{staticClass:"pattern"},[s._v("gr[ae]y")]),s._v("。")]),s._v(" "),t("li",[t("code",{staticClass:"pattern"},[s._v("gra|ey")]),s._v(" 匹配 “gra” or “ey”。")])]),s._v(" "),t("p",[s._v("我们通常用圆括号把模式中的选择部分括起来，像这样 "),t("code",{staticClass:"pattern"},[s._v("before(XXX|YYY)after")]),s._v("。")]),s._v(" "),t("br"),s._v(" "),t("br"),s._v(" "),t("br"),s._v(" "),t("h2",{attrs:{id:"时间正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间正则表达式","aria-hidden":"true"}},[s._v("#")]),s._v(" 时间正则表达式")]),s._v(" "),t("p",[s._v("在之前的章节中有个任务是构建用于查找形如 "),t("code",[s._v("hh:mm")]),s._v(" 的时间字符串，例如 "),t("code",[s._v("12:00")]),s._v("。但是简单的 "),t("code",{staticClass:"pattern"},[s._v("\\d\\d:\\d\\d")]),s._v(" 过于模糊。它同时匹配 "),t("code",[s._v("25:99")]),s._v("。")]),s._v(" "),t("p",[s._v("如何构建更优的正则表达式？")]),s._v(" "),t("p",[s._v("我们可以应用到更多的严格匹配结果中：")]),s._v(" "),t("ul",[t("li",[s._v("首个匹配数字必须是 "),t("code",[s._v("0")]),s._v(" 或 "),t("code",[s._v("1")]),s._v("，同时其后还要跟随任一数字。")]),s._v(" "),t("li",[s._v("或者是数字 "),t("code",[s._v("2")]),s._v(" 之后跟随 "),t("code",{staticClass:"pattern"},[s._v("[0-3]")]),s._v("。")])]),s._v(" "),t("p",[s._v("构建正则表达式："),t("code",{staticClass:"pattern"},[s._v("[01]\\d|2[0-3]")]),s._v("。")]),s._v(" "),t("p",[s._v("接着可以添加冒号和分钟的部分。")]),s._v(" "),t("p",[s._v("分钟的部分必须在 "),t("code",[s._v("0")]),s._v(" 到 "),t("code",[s._v("59")]),s._v(" 区间，在正则表达式语言中含义为首个匹配数字 "),t("code",{staticClass:"pattern"},[s._v("[0-5]")]),s._v(" 其后跟随任一数字 "),t("code",[s._v("\\d")]),s._v("。")]),s._v(" "),t("p",[s._v("把它们拼接在一起形成最终的模式 "),t("code",{staticClass:"pattern"},[s._v("[01]\\d|2[0-3]:[0-5]\\d")]),s._v("。")]),s._v(" "),t("p",[s._v("快大功告成了，但仍然存在一个问题。选择符 "),t("code",[s._v("|")]),s._v(" 在 "),t("code",{staticClass:"pattern"},[s._v("[01]\\d")]),s._v(" 和 "),t("code",{staticClass:"pattern"},[s._v("2[0-3]:[0-5]\\d")]),s._v(" 之间。这是错误的，因为它只匹配符号左侧或右侧任一表达式。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[01]\\d|2[0-3]:[0-5]\\d/g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"12"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 12 (matched [01]\\d)")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("这个错误相当明显，但也是初学正则表达式的常见错误。")]),s._v(" "),t("p",[s._v("我们需要添加一个插入语用于匹配时钟："),t("code",[s._v("[01]\\d")]),s._v(" 或 "),t("code",[s._v("2[0-3]")]),s._v("。")]),s._v(" "),t("p",[s._v("以下为正确版本：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/([01]\\d|2[0-3]):[0-5]\\d/g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"00:00 10:10 23:59 25:99 1:2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 00:00,10:10,23:59")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("br"),s._v(" "),t("br"),s._v(" "),t("br"),s._v(" "),t("h2",{attrs:{id:"例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子","aria-hidden":"true"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),t("h3",{attrs:{id:"_1-查找编程语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-查找编程语言","aria-hidden":"true"}},[s._v("#")]),s._v(" 1. 查找编程语言")]),s._v(" "),t("p",[s._v("有许多编程语言，例如 Java, JavaScript, PHP, C, C++。")]),s._v(" "),t("p",[s._v("构建一个正则式，用来匹配字符串 "),t("code",{staticClass:"subject"},[s._v("Java JavaScript PHP C++ C")]),s._v(" 中包含的编程语言：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/your regexp/g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Java JavaScript PHP C++ C"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Java JavaScript PHP C++ C")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("br"),s._v(" "),t("p",[t("strong",[s._v("解决方案")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/*\n  第一个解法是列出所有语言，中间加上 `|` 符号。\n\n  但是运行不如所愿：\n\n    let reg = /Java|JavaScript|PHP|C|C\\+\\+/g;\n    let str = "Java, JavaScript, PHP, C, C++";\n    alert( str.match(reg) ); // Java,Java,PHP,C,C\n\n  正则表达式引擎查找选择模式的时是挨个查找的。意思是：它先匹配是否存在 Java，否则 —— 接着匹配 JavaScript 及其后的字符串。\n\n  结果，JavaScript 永远匹配不到，因为 Java 先被匹配了。\n\n  C 和 C++ 同理。\n\n  这个问题有两个解决办法：\n\n    1. 变更匹配顺序，长的字符串优先匹配：JavaScript|Java|C\\+\\+|C|PHP。\n    2. 合并相同前缀：Java(Script)?|C(\\+\\+)?|PHP。\n\n  运行代码如下：\n\n    let reg = /Java(Script)?|C(\\+\\+)?|PHP/g;\n    let str = "Java, JavaScript, PHP, C, C++";\n    alert( str.match(reg) ); // Java,JavaScript,PHP,C,C++\n* */')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("br"),s._v(" "),t("br"),s._v(" "),t("h3",{attrs:{id:"_2-查找-bbtag-对"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查找-bbtag-对","aria-hidden":"true"}},[s._v("#")]),s._v(" 2. 查找 bbtag 对")]),s._v(" "),t("p",[s._v("“bb-tag” 形如 "),t("code",[s._v("[tag]...[/tag]")]),s._v("，"),t("code",[s._v("tag")]),s._v(" 匹配 "),t("code",[s._v("b")]),s._v("、"),t("code",[s._v("url")]),s._v(" 或 "),t("code",[s._v("quote")]),s._v(" 其中之一。")]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[b]text[/b]\n[url]http://google.com[/url]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("BB-tags 可以嵌套。但标签不能自嵌套，比如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("可行：\n[url] [b]http://google.com[/b] [/url]\n[quote] [b]text[/b] [/quote]\n\n不可行：\n[b][b]text[/b][/b]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("标签可以包含换行，通常为以下形式：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[quote]\n  [b]text[/b]\n[/quote]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("构造一个正则式用于查找所有 BB-tags 和其内容。")]),s._v(" "),t("p",[s._v("举例：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/your regexp/g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"..[url]http://google.com[/url].."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [url]http://google.com[/url]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("如果标签嵌套，那么我们需要记录匹配的外层标签（如果希望继续查找匹配的标签内容的话）：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/your regexp/g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"..[url][b]http://google.com[/b][/url].."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [url][b]http://google.com[/b][/url]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("br"),s._v(" "),t("p",[t("strong",[s._v("解决方案")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n  起始标签是 \\[(b|url|quote)\\]。\n\n  匹配字符串直到遇到结束标签 —— 模式 [\\s\\S]*? 匹配任意字符，包括换行和用于结束标记的反向引用。\n\n  完整模式为：\\[(b|url|quote)\\][\\s\\S]*?\\[/\\1\\]。\n\n  运行代码如下：\n\n    let reg = /\\[(b|url|quote)\\][\\s\\S]*?\\[\\/\\1\\]/g;\n\n    let str = `\n      [b]hello![/b]\n      [quote]\n        [url]http://google.com[/url]\n      [/quote]\n    `;\n\n    alert( str.match(reg) ); // [b]hello![/b],[quote][url]http://google.com[/url][/quote]\n\n  请注意我们要转义结束标签 [/\\1] 中的斜杠，通常斜杠会关闭模式。\n* */")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("br"),s._v(" "),t("br"),s._v(" "),t("h3",{attrs:{id:"_3-查询引用字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-查询引用字符串","aria-hidden":"true"}},[s._v("#")]),s._v(" 3. 查询引用字符串")]),s._v(" "),t("p",[s._v("构建一个正则表达式用于匹配双引号内的字符串 "),t("code",{staticClass:"subject"},[s._v('"..."')]),s._v("。")]),s._v(" "),t("p",[s._v("最重要的部分是字符串应该支持转义，正如 JavaScript 字符串的行为一样。例如，引号可以插入为 "),t("code",{staticClass:"subject"},[s._v('"')]),s._v("，换行符为 "),t("code",{staticClass:"subject"},[s._v("\\n")]),s._v("，斜杠本身为 "),t("code",{staticClass:"subject"},[s._v("\\\\")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Just like \\"here\\"."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("对我们来说，重要的是转义的引号 "),t("code",{staticClass:"subject"},[s._v('"')]),s._v(" 不会结束字符串匹配。")]),s._v(" "),t("p",[s._v("所以，我们应该匹配两个引号之间的内容，且忽略中间转义的引号。")]),s._v(" "),t("p",[s._v("这是任务的关键部分，否则这个任务就没什么意思了。")]),s._v(" "),t("p",[s._v("匹配字符串示例：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('.. "test me" ..\n.. "Say \\"Hello\\"!" ... (escaped quotes inside)\n.. "\\\\" ..  (double slash inside)\n.. "\\\\ \\"" ..  (double slash and an escaped quote inside)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("在 JavaScript 中，双斜杠用于把斜杠转义为字符串，如下所示：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('\' .. "test me" .. "Say \\\\"Hello\\\\"!" .. "\\\\\\\\ \\\\"" .. \'')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the in-memory string")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//  .. "test me" .. "Say \\"Hello\\"!" .. "\\\\ \\"" ..')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("br"),s._v(" "),t("p",[t("strong",[s._v("解决方案")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/*\n  答案是 /"(\\\\.|[^"\\\\])*"/g。\n\n  步骤如下：\n\n    首先匹配左双引号 "\n    接着如果有反斜杠 \\\\，则匹配其后跟随的任意字符。（技术上，我们必须在模式中用双反斜杠，因为它是一个特殊的字符，但实际上是一个反斜杠字符）\n    如果没有，则匹配除双引号（字符串的结束）和反斜杠（排除仅存在反斜杠的情况，反斜杠仅在和其后字符一起使用时有效）外的任意字符：[^"\\\\]\n    …继续匹配直到遇到反双引号\n\n  运行代码如下：\n\n    let reg = /"(\\\\.|[^"\\\\])*"/g;\n    let str = \' .. "test me" .. "Say \\\\"Hello\\\\"!" .. "\\\\\\\\ \\\\"" .. \';\n\n    alert( str.match(reg) ); // "test me","Say \\"Hello\\"!","\\\\ \\""\n* */')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("br"),s._v(" "),t("br"),s._v(" "),t("h3",{attrs:{id:"_4-查找完整标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-查找完整标签","aria-hidden":"true"}},[s._v("#")]),s._v(" 4. 查找完整标签")]),s._v(" "),t("p",[s._v("写出一个正则表达式，用于查找 "),t("code",[s._v("<style...>")]),s._v(" 标签。它应该匹配完整的标签：该标签可能是没有属性的标签 "),t("code",[s._v("<style>")]),s._v(" 或是有很多属性的标签 "),t("code",[s._v('<style type="..." id="...">')]),s._v("。")]),s._v(" "),t("p",[s._v("…同时正则表达式不应该匹配 "),t("code",[s._v("<styler>")]),s._v("！")]),s._v(" "),t("p",[s._v("举例如下：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/your regexp/g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<style> <styler> <style test=\"...\">'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// <style>, <style test="...">')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("br"),s._v(" "),t("p",[t("strong",[s._v("解决方案")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/*\n  模式的开头显而易见：<style。\n\n  …然而不能简单地写出 <style.*?> 这样的表达式，因为会同时匹配 <styler>。\n\n  要么匹配 <style 后的一个空格，然后匹配任意内容；要么直接匹配结束符号 >。\n\n  最终的正则表达式为：<style(>|\\s.*?>)。\n\n  运行代码如下：\n\n    let reg = /<style(>|\\s.*?>)/g;\n    alert( \'<style> <styler> <style test="...">\'.match(reg) ); // <style>, <style test="...">\n* */')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("br"),s._v(" "),t("br"),s._v(" "),t("br")])},[],!1,null,null,null);a.default=e.exports}}]);