(window.webpackJsonp=window.webpackJsonp||[]).push([[301],{1230:function(a,s,t){"use strict";t.r(s);var n=t(19),r=Object(n.a)({},function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("在某些情况下，调用堆栈中函数调用的数量超出了调用堆栈的实际大小，浏览器会抛出一个错误终止运行。")]),a._v(" "),t("p",[a._v("对应下面的递归就会无限制的循环下去，直到超出调用堆栈的实际大小，这个是浏览器定义的。")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[t("img",{attrs:{src:"error.png",alt:"超出堆栈"}})]),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("h2",{attrs:{id:"栈数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈数据结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 栈数据结构")]),a._v(" "),t("p",[a._v("栈的结构就是后进先出 "),t("strong",[a._v("（ LIFO ）")]),a._v(" 。文中使用乒乓球盒子的结构来解释。")]),a._v(" "),t("p",[a._v("处于盒子中最顶层的乒乓球5，它一定是最后被放进去，但可以最先被使用。而我们想要使用底层的乒乓球1，就必须将上面的4个乒乓球却出来，让乒乓球1处于盒子顶层。")]),a._v(" "),t("p",[t("img",{attrs:{src:"memory.jpg",alt:"栈数据结构"}})]),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("h2",{attrs:{id:"堆数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆数据结构","aria-hidden":"true"}},[a._v("#")]),a._v(" 堆数据结构")]),a._v(" "),t("p",[a._v("堆数据结构是一种树状结构，它的存取数据的方式与书架和书非常相似。我们只需要知道书的名字就可以直接取出书了，并不需要把上面的书取出来。JSON格式的数据中，我们存储的 "),t("code",[a._v("key-value")]),a._v(" 可以是无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。")]),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("h2",{attrs:{id:"队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列","aria-hidden":"true"}},[a._v("#")]),a._v(" 队列")]),a._v(" "),t("p",[a._v("队列是一种先进先出 "),t("strong",[a._v("（ FIFO ）")]),a._v(" 的数据结构，这是事件循环 "),t("strong",[a._v("（Event Loop）")]),a._v(" 的基础结构。")]),a._v(" "),t("p",[t("img",{attrs:{src:"alignment.jpg",alt:"队列"}})]),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("h2",{attrs:{id:"变量的存放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量的存放","aria-hidden":"true"}},[a._v("#")]),a._v(" 变量的存放")]),a._v(" "),t("p",[a._v("首先我们应该知道内存中有栈和堆，那么变量应该存放在哪里呢？ "),t("strong",[a._v("堆？")]),a._v(" "),t("strong",[a._v("栈？")])]),a._v(" "),t("ol",[t("li",[t("p",[t("strong",[a._v("基本类型：")])]),a._v(" "),t("ul",[t("li",[a._v("保存在 "),t("strong",[a._v("栈")]),a._v(" 内存中。")]),a._v(" "),t("li",[a._v("因为这些类型在内存中分别占有固定大小的空间，通过按值来访问。")]),a._v(" "),t("li",[a._v("基本类型一共有6种，Undefined、Null、Boolean、Number、String 和 Symbol。")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("引用类型：")])]),a._v(" "),t("ul",[t("li",[a._v("保存在 "),t("strong",[a._v("堆")]),a._v(" 内存中。")]),a._v(" "),t("li",[a._v("因为这种值的大小不固定，因此不能把它们保存到栈内存中。")]),a._v(" "),t("li",[a._v("但内存地址大小是固定的。因此保存在堆内存中。")]),a._v(" "),t("li",[a._v("在栈内存中存放的只是该对象的访问地址。")]),a._v(" "),t("li",[a._v("当查询引用类型的变量时，先从 "),t("strong",[a._v("栈中读取内存地址")]),a._v("，然后再通过地址 "),t("strong",[a._v("找到堆中的值")]),a._v("。对于这种，我们把它叫做按 "),t("strong",[a._v("引用访问")]),a._v("。")])])])]),a._v(" "),t("br"),a._v(" "),t("p",[t("img",{attrs:{src:"stack.png",alt:"堆栈"}})]),a._v(" "),t("br"),a._v(" "),t("p",[a._v("在计算机的数据结构中，栈比堆的运行速度快，Object 是一个复杂的结构且可以扩展：数组可扩充，对象可添加属性，都可以增删查改。将它们放在堆中是为了不影响栈的效率。而是通过引用的方式查找到堆中的实际对象在进行操作。所以查找引用类型值的时候先去 "),t("strong",[a._v("栈")]),a._v(" 查找，再去 "),t("strong",[a._v("堆")]),a._v(" 查找。")]),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("h2",{attrs:{id:"闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包","aria-hidden":"true"}},[a._v("#")]),a._v(" 闭包")]),a._v(" "),t("p",[a._v("闭包中的变量并不保存在栈内存中，而是存在 "),t("strong",[a._v("堆内存")]),a._v(" 中，这也就解释了函数之后为什么闭包还能引用到函数内的变量。")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("闭包")]),a._v(" 的简单定义： 在一个函数里再定义一个内部函数，并且这个内部函数用到了外边函数的变量或参数，并且外部函数的返回值是内函数的引用，或直接或间接的立即执行内部函数。")])]),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("h2",{attrs:{id:"例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子","aria-hidden":"true"}},[a._v("#")]),a._v(" 例子")]),a._v(" "),t("p",[a._v("例子1：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// a的值？")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("例子2：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'前端开发'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\nb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'web'")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// b.name的值？")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("例子3：")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'前端开发'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// b的值？")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("分别是： "),t("code",[a._v("20")]),a._v(" "),t("code",[a._v("web")]),a._v(" "),t("code",[a._v("前端开发")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("例子1： a, b 都是基本类型，它们的值是存储在栈中的，a, b分别有各自独立的栈空间，所以修改了 b 的值以后，a 的值并不会发生变化。")])]),a._v(" "),t("li",[t("p",[a._v("例子2： a, b 都是引用类型，栈内存中存放地址指向堆内存中的对象，引用类型的赋值会为新的变量自动分配一个新的值保存在变量对象中，但只是引用类型的一个地址指针而已，实际指向的是同一个对象，所以修改 b.name 的值后，相应的 a.name 也就发生了改变。")])]),a._v(" "),t("li",[t("p",[a._v("例子3： 首先要说明的是 null 是基本类型， a = null 之后，只是把 a 存储在栈内存中地址改成了基本类型 null，并不会影响堆内存中的对象，所以 b 的值不受影响。")])])]),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("h2",{attrs:{id:"内存空间管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存空间管理","aria-hidden":"true"}},[a._v("#")]),a._v(" 内存空间管理")]),a._v(" "),t("p",[a._v("JavaScript 的内存声明周期是")]),a._v(" "),t("ul",[t("li",[t("ol",[t("li",[a._v("分配你所需要的内存")])])]),a._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[a._v("使用分配到的内存（读、写）")])])]),a._v(" "),t("li",[t("ol",{attrs:{start:"3"}},[t("li",[a._v("不需要时将其释放、归还")])])])]),a._v(" "),t("p",[a._v("JavaScript 有自动垃圾收集机制，最常用的是通过 "),t("strong",[a._v("标记清除")]),a._v(" 的算法来找到哪些对象不再继续使用的，使用 a = null 其实仅仅只是做了一个释放引用的操作，让 a 原本对应的值失去引用，脱离执行环境，这个值会在下一次垃圾收集器执行操作时被找到并释放。")]),a._v(" "),t("p",[a._v("在局部作用域中，当函数执行完毕，局部变量也就没有存在的必要了，因此垃圾收集器很容易做出判断并回收。但是全局变量什么时候需要自动释放内存空间则很难判断，因此在开发中，需要尽量避免使用全局变量。")]),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("h2",{attrs:{id:"思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思考","aria-hidden":"true"}},[a._v("#")]),a._v(" 思考")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("x \t"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ?")]),a._v("\nb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("x     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ?")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("答案是 "),t("code",[a._v("undefined")]),a._v(" "),t("code",[a._v("{ n: 2 }")])]),a._v(" "),t("ol",[t("li",[t("p",[t("strong",[a._v("优先级")]),a._v(" "),t("code",[a._v(".")]),a._v(" 的优先级高于 "),t("code",[a._v("=")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("所以先执行 "),t("code",[a._v("a.x")])])]),a._v(" "),t("li",[t("p",[a._v("堆内存中的 "),t("code",[a._v("{n: 1}")]),a._v(" 就会变成 "),t("code",[a._v("{n: 1, x: undefined}")])])]),a._v(" "),t("li",[t("p",[a._v("改变之后相应的 "),t("code",[a._v("b.x")]),a._v(" 也变化了，因为指向的是同一个对象。")])])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("赋值操作是 从右到左")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("所以先执行 "),t("code",[a._v("a = {n: 2}")]),a._v("，"),t("code",[a._v("a")]),a._v(" 的引用就被改变了")])]),a._v(" "),t("li",[t("p",[a._v("然后这个返回值又赋值给了 "),t("code",[a._v("a.x")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("需要注意")]),a._v("的是这时候 "),t("code",[a._v("a.x")]),a._v(" 是第一步中 "),t("code",[a._v("{n: 1, x: undefined}")]),a._v(" 的那个对象，其实就是 "),t("code",[a._v("b.x")]),a._v("，相当于 "),t("code",[a._v("b.x = {n: 2}")])])])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"memory_space.png",alt:"思考"}})]),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("br"),a._v(" "),t("p",[a._v("参考")]),a._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/996671d4dcc4",target:"_blank",rel:"noopener noreferrer"}},[a._v("前端基础进阶（一）：内存空间详细图解"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.oschina.net/translate/how-does-javascript-actually-work-part-1",target:"_blank",rel:"noopener noreferrer"}},[a._v("解读 JavaScript 之引擎、运行时和堆栈调用"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/xdd19910505/article/details/41900693",target:"_blank",rel:"noopener noreferrer"}},[a._v("JavaScript变量——栈内存or堆内存"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000004224719",target:"_blank",rel:"noopener noreferrer"}},[a._v("连等赋值"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[a._v("运算符优先级\nMDN"),t("OutboundLink")],1)])])])},[],!1,null,null,null);s.default=r.exports}}]);