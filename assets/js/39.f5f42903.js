(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{1268:function(s,t,a){"use strict";a.r(t);var n=a(19),e=Object(n.a)({},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"递归和堆栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递归和堆栈","aria-hidden":"true"}},[s._v("#")]),s._v(" 递归和堆栈")]),s._v(" "),n("p",[s._v("让我们回到函数，进行更深入的研究。")]),s._v(" "),n("p",[s._v("我们的第一个主题是 "),n("strong",[s._v("递归（recursion）")]),s._v("。")]),s._v(" "),n("p",[s._v("如果你不是刚接触编程，那么你可能已经很熟悉它了，那么你可以跳过这一章。")]),s._v(" "),n("p",[s._v("递归是一种编程模式，在一个任务可以自然地拆分成多个相同类型但更简单的任务的情况下非常有用。或者，在一个任务可以简化为一个简单的行为加上该任务的一个更简单的变体的时候可以使用。或者，就像我们很快会看到的那样，处理某些数据结构。")]),s._v(" "),n("p",[s._v("当一个函数解决一个任务时，在解决的过程中它可以调用很多其它函数。在部分情况下，函数会调用 "),n("strong",[s._v("自身")]),s._v("。这就是所谓的 "),n("strong",[s._v("递归")]),s._v("。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"两种思考方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#两种思考方式","aria-hidden":"true"}},[s._v("#")]),s._v(" 两种思考方式")]),s._v(" "),n("p",[s._v("简单起见，让我们写一个函数 "),n("code",[s._v("pow(x, n)")]),s._v("，它可以计算 "),n("code",[s._v("x")]),s._v(" 的 "),n("code",[s._v("n")]),s._v(" 次方。换句话说就是，"),n("code",[s._v("x")]),s._v(" 乘以自身 "),n("code",[s._v("n")]),s._v(" 次。")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("br"),s._v(" "),n("p",[s._v("有两种实现方式。")]),s._v(" "),n("ol",[n("li",[s._v("迭代思路：使用 "),n("code",[s._v("for")]),s._v(" 循环：")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 再循环中，用 x 乘以 result n 次")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    result "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*=")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 8")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("递归思路：简化任务，调用自身：")])]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 8")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("br"),s._v(" "),n("p",[s._v("请注意，递归变体在本质上是不同的。")]),s._v(" "),n("p",[s._v("当 "),n("code",[s._v("pow(x, n)")]),s._v(" 被调用时，执行分为两个分支：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("              "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x\n             "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n             \\\n              "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("     "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ol",[n("li",[s._v("如果 "),n("code",[s._v("n == 1")]),s._v("，所有事情都会很简单，这叫做 "),n("strong",[s._v("基础")]),s._v(" 的递归，因为它会立即产生明显的结果："),n("code",[s._v("pow(x, 1)")]),s._v(" 等于 "),n("code",[s._v("x")]),s._v("。")]),s._v(" "),n("li",[s._v("否则，我们可以用 "),n("code",[s._v("x * pow(x, n - 1)")]),s._v(" 表示 "),n("code",[s._v("pow(x, n)")]),s._v("。在数学里，可能会写为 "),n("code",[s._v("x^n = x * x^(n-1)")]),s._v("。这叫做 "),n("strong",[s._v("一个递归步骤")]),s._v("：我们将任务转化为更简单的行为（"),n("code",[s._v("x")]),s._v(" 的乘法）和更简单的同类任务的调用（带有更小的 "),n("code",[s._v("n")]),s._v(" 的 "),n("code",[s._v("pow")]),s._v(" 运算）。接下来的步骤将其进一步简化，直到 "),n("code",[s._v("n")]),s._v(" 达到 "),n("code",[s._v("1")]),s._v("。")])]),s._v(" "),n("p",[s._v("我们也可以说 "),n("code",[s._v("pow")]),s._v(" "),n("strong",[s._v("递归地调用自身")]),s._v(" 直到 "),n("code",[s._v("n == 1")]),s._v("。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(681),alt:""}})]),s._v(" "),n("p",[s._v("比如，为了计算 "),n("code",[s._v("pow(2, 4)")]),s._v("，递归变体经过了下面几个步骤：")]),s._v(" "),n("ol",[n("li",[n("code",[s._v("pow(2, 4) = 2 * pow(2, 3)")])]),s._v(" "),n("li",[n("code",[s._v("pow(2, 3) = 2 * pow(2, 2)")])]),s._v(" "),n("li",[n("code",[s._v("pow(2, 2) = 2 * pow(2, 1)")])]),s._v(" "),n("li",[n("code",[s._v("pow(2, 1) = 2")])])]),s._v(" "),n("p",[s._v("因此，递归将函数调用简化为一个更简单的函数调用，然后再将其简化为一个更简单的函数，以此类推，直到结果变得显而易见。")]),s._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",[n("strong",[s._v("递归通常更短")])]),s._v(" "),n("p",[s._v("递归解通常比迭代解更短。")]),s._v(" "),n("p",[s._v("在这儿，我们可以使用条件运算符 "),n("code",[s._v("?")]),s._v(" 而不是 "),n("code",[s._v("if")]),s._v(" 语句，从而使 "),n("code",[s._v("pow(x, n)")]),s._v(" 更简洁并且可读性依然很高：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])]),s._v(" "),n("p",[s._v("最大的嵌套调用次数（包括首次）被称为 "),n("strong",[s._v("递归深度")]),s._v("。在我们的例子中，它正好等于 "),n("code",[s._v("n")]),s._v("。")]),s._v(" "),n("p",[s._v("最大递归深度受限于 JavaScript 引擎。对我们来说，引擎在最大迭代深度为 10000 及以下时是可靠的，有些引擎可能允许更大的最大深度，但是对于大多数引擎来说，100000 可能就超出限制了。有一些自动优化能够帮助减轻这种情况（尾部调用优化），但目前它们还没有被完全支持，只能用于简单场景。")]),s._v(" "),n("p",[s._v("这就限制了递归的应用，但是递归仍然被广泛使用。有很多任务中，递归思维方式会使代码更简单，更容易维护。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"执行上下文和堆栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文和堆栈","aria-hidden":"true"}},[s._v("#")]),s._v(" 执行上下文和堆栈")]),s._v(" "),n("p",[s._v("现在我们来研究一下递归调用是如何工作的。为此，我们会先看看函数底层的工作原理。")]),s._v(" "),n("p",[s._v("有关正在运行的函数的执行过程的相关信息被存储在其 "),n("strong",[s._v("执行上下文")]),s._v(" 中。")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://tc39.github.io/ecma262/#sec-execution-contexts",target:"_blank",rel:"noopener noreferrer"}},[s._v("执行上下文"),n("OutboundLink")],1),s._v(" 是一个内部数据结构，它包含有关函数执行时的详细细节：当前控制流所在的位置，当前的变量，"),n("code",[s._v("this")]),s._v(" 的值（此处我们不使用它），以及其它的一些内部细节。")]),s._v(" "),n("p",[s._v("一个函数调用仅具有一个与其相关联的执行上下文。")]),s._v(" "),n("p",[s._v("当一个函数进行嵌套调用时，将发生以下的事儿：")]),s._v(" "),n("ul",[n("li",[s._v("当前函数被暂停；")]),s._v(" "),n("li",[s._v("与它关联的执行上下文被一个叫做 "),n("strong",[s._v("执行上下文堆栈")]),s._v(" 的特殊数据结构保存；")]),s._v(" "),n("li",[s._v("执行嵌套调用；")]),s._v(" "),n("li",[s._v("嵌套调用结束后，从堆栈中恢复之前的执行上下文，并从停止的位置恢复外部函数")])]),s._v(" "),n("p",[s._v("让我们看看 "),n("code",[s._v("pow(2, 3)")]),s._v(" 调用期间都发生了什么。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h3",{attrs:{id:"pow-2-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pow-2-3","aria-hidden":"true"}},[s._v("#")]),s._v(" pow(2, 3)")]),s._v(" "),n("p",[s._v("在调用 "),n("code",[s._v("pow(2, 3)")]),s._v(" 的开始，执行上下文（context）会存储变量："),n("code",[s._v("x = 2, n = 3")]),s._v("，执行流程在函数的第 "),n("code",[s._v("1")]),s._v(" 行。")]),s._v(" "),n("p",[s._v("我们将其描绘如下：")]),s._v(" "),n("ul",[n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 3, at line 1 }",call:"call: pow(2, 3)"}})],1)]),s._v(" "),n("p",[s._v("这是函数开始执行的时候。条件 "),n("code",[s._v("n == 1")]),s._v(" 结果为假，所以执行流程进入 "),n("code",[s._v("if")]),s._v(" 的第二分支。")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("变量相同，但是行改变了，因此现在的上下文是：")]),s._v(" "),n("ul",[n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 3, at line 5 }",call:"call: pow(2, 3)"}})],1)]),s._v(" "),n("p",[s._v("为了计算 "),n("code",[s._v("x * pow(x, n - 1)")]),s._v("，我们需要使用带有新参数的新的 "),n("code",[s._v("pow")]),s._v(" 子调用 "),n("code",[s._v("pow(2, 2)")]),s._v("。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h3",{attrs:{id:"pow（2-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pow（2-2","aria-hidden":"true"}},[s._v("#")]),s._v(" pow（2, 2)")]),s._v(" "),n("p",[s._v("为了执行嵌套调用，JavaScript 会在 "),n("strong",[s._v("执行上下文堆栈")]),s._v(" 中记住当前的执行上下文。")]),s._v(" "),n("p",[s._v("这里我们调用相同的函数 "),n("code",[s._v("pow")]),s._v("，但这绝对没问题。所有函数的处理都是一样的：")]),s._v(" "),n("ul",[n("li",[s._v("当前上下文被“记录”在堆栈的顶部。")]),s._v(" "),n("li",[s._v("为子调用创建新的上下文。")]),s._v(" "),n("li",[s._v("当子调用结束后 —— 前一个上下文被从堆栈中弹出，并继续执行。")])]),s._v(" "),n("p",[s._v("下面是进入子调用 "),n("code",[s._v("pow(2, 2)")]),s._v(" 时的上下文堆栈：")]),s._v(" "),n("ul",[n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 2, at line 1 }",call:"call: pow(2, 2)"}})],1),s._v(" "),n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 3, at line 5 }",call:"call: pow(2, 3)",bold:"none"}})],1)]),s._v(" "),n("p",[s._v("新的当前执行上下文位于顶部（粗体显示），之前记住的上下文位于下方。")]),s._v(" "),n("p",[s._v("当我们完成子调用后 —— 很容易恢复上一个上下文，因为它既保留了变量，也保留了当时所在代码的确切位置。")]),s._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",[n("strong",[s._v("请注意：")])]),s._v(" "),n("p",[s._v("在上面的图中，我们使用“行（line）”一词，因为在我们的示例中，每一行只有一个子调用，但通常一行代码可能会包含多个子调用，例如 "),n("code",[s._v("pow(…) + pow(…) + somethingElse(…)")]),s._v("。")]),s._v(" "),n("p",[s._v("因此，更准确地说，执行是“在子调用之后立即恢复”的。")])]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h3",{attrs:{id:"pow-2-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pow-2-1","aria-hidden":"true"}},[s._v("#")]),s._v(" pow(2, 1)")]),s._v(" "),n("p",[s._v("重复该过程：在第 "),n("code",[s._v("5")]),s._v(" 行生成新的子调用，现在的参数是 "),n("code",[s._v("x=2")]),s._v(", "),n("code",[s._v("n=1")]),s._v("。")]),s._v(" "),n("p",[s._v("新的执行上下文被创建，前一个被压入堆栈顶部：")]),s._v(" "),n("ul",[n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 1, at line 1 }",call:"call: pow(2, 1)"}})],1),s._v(" "),n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 2, at line 5 }",call:"call: pow(2, 2)",bold:"none"}})],1),s._v(" "),n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 3, at line 5 }",call:"call: pow(2, 3)",bold:"none"}})],1)]),s._v(" "),n("p",[s._v("此时，有 2 个旧的上下文和 1 个当前正在运行的 "),n("code",[s._v("pow(2, 1)")]),s._v(" 的上下文。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h3",{attrs:{id:"出口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#出口","aria-hidden":"true"}},[s._v("#")]),s._v(" 出口")]),s._v(" "),n("p",[s._v("在执行 "),n("code",[s._v("pow(2, 1)")]),s._v(" 时，与之前的不同，条件 "),n("code",[s._v("n == 1")]),s._v(" 为真，因此 "),n("code",[s._v("if")]),s._v(" 的第一个分支生效：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("此时不再有更多的嵌套调用，所以函数结束，返回 "),n("code",[s._v("2")]),s._v("。")]),s._v(" "),n("p",[s._v("函数完成后，就不再需要其执行上下文了，因此它被从内存中移除。前一个上下文恢复到堆栈的顶部：")]),s._v(" "),n("ul",[n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 2, at line 5 }",call:"call: pow(2, 2)"}})],1),s._v(" "),n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 3, at line 5 }",call:"call: pow(2, 3)",bold:"none"}})],1)]),s._v(" "),n("p",[s._v("恢复执行 "),n("code",[s._v("pow(2, 2)")]),s._v("。它拥有子调用 "),n("code",[s._v("pow(2, 1)")]),s._v(" 的结果，因此也可以完成 "),n("code",[s._v("x * pow(x, n - 1)")]),s._v(" 的执行，并返回 "),n("code",[s._v("4")]),s._v("。")]),s._v(" "),n("p",[s._v("然后，前一个上下文被恢复：")]),s._v(" "),n("ul",[n("li",[n("learn_javascript_asdiasdkc-one-uweiqowjsa-01-context",{attrs:{context:"Context: { x: 2, n: 3, at line 5 }",call:"call: pow(2, 3)"}})],1)]),s._v(" "),n("p",[s._v("当它结束后，我们得到了结果 "),n("code",[s._v("pow(2, 3) = 8")]),s._v("。")]),s._v(" "),n("br"),s._v(" "),n("p",[s._v("本示例中的递归深度为："),n("strong",[s._v("3")]),s._v("。")]),s._v(" "),n("p",[s._v("从上面的插图我们可以看出，递归深度等于堆栈中上下文的最大数量。")]),s._v(" "),n("p",[s._v("请注意内存要求。上下文占用内存，在我们的示例中，求 "),n("code",[s._v("n")]),s._v(" 次方需要存储 "),n("code",[s._v("n")]),s._v(" 个上下文，以供更小的 "),n("code",[s._v("n")]),s._v(" 值进行计算使用。")]),s._v(" "),n("p",[s._v("而循环算法更节省内存：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    result "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*=")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("迭代 "),n("code",[s._v("pow")]),s._v(" 的过程中仅使用了一个上下文用于修改 "),n("code",[s._v("i")]),s._v(" 和 "),n("code",[s._v("result")]),s._v("。它的内存要求小，并且是固定了，不依赖于 "),n("code",[s._v("n")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("任何递归都可以用循环来重写。通常循环变体更有效。")])]),s._v(" "),n("p",[s._v("……但有时重写很难，尤其是函数根据条件使用不同的子调用，然后合并它们的结果，或者分支比较复杂时。而且有些优化可能没有必要，完全不值得。")]),s._v(" "),n("p",[s._v("递归可以使代码更短，更易于理解和维护。并不是每个地方都需要优化，大多数时候我们需要一个好代码，这就是为什么要使用它。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"递归遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递归遍历","aria-hidden":"true"}},[s._v("#")]),s._v(" 递归遍历")]),s._v(" "),n("p",[s._v("递归的另一个重要应用就是递归遍历。")]),s._v(" "),n("p",[s._v("假设我们有一家公司。人员结构可以表示为一个对象：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" company "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  sales"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'John'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Alice'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1600")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n  development"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    sites"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Peter'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Alex'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1800")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n    internals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jack'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1300")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("换句话说，一家公司有很多部门。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("一个部门可能有一 "),n("strong",[s._v("数组")]),s._v(" 的员工，比如，"),n("code",[s._v("sales")]),s._v(" 部门有 2 名员工：John 和 Alice。")])]),s._v(" "),n("li",[n("p",[s._v("或者，一个部门可能会划分为几个子部门，比如 "),n("code",[s._v("development")]),s._v(" 有两个分支："),n("code",[s._v("sites")]),s._v(" 和 "),n("code",[s._v("internals")]),s._v("，它们都有自己的员工。")])]),s._v(" "),n("li",[n("p",[s._v("当一个子部门增长时，它也有可能被拆分成几个子部门（或团队）。")]),s._v(" "),n("p",[s._v("例如，"),n("code",[s._v("sites")]),s._v(" 部门在未来可能会分为 "),n("code",[s._v("siteA")]),s._v(" 和 "),n("code",[s._v("siteB")]),s._v("。并且，它们可能会被再继续拆分。没有图示，脑补一下吧。")])])]),s._v(" "),n("p",[s._v("现在，如果我们需要一个函数来获取所有薪资的总数。我们该怎么做？")]),s._v(" "),n("p",[s._v("迭代方式并不容易，因为结构比较复杂。首先想到的可能是在 "),n("code",[s._v("company")]),s._v(" 上使用 "),n("code",[s._v("for")]),s._v(" 循环，并在第一层部分上嵌套子循环。但是，之后我们需要更多的子循环来遍历像 "),n("code",[s._v("sites")]),s._v(" 这样的二级部门的员工…… 然后，将来可能会出现在三级部门上的另一个子循环？如果我们在代码中写 3-4 级嵌套的子循环来遍历单个对象， 那代码得多丑啊。")]),s._v(" "),n("br"),s._v(" "),n("p",[s._v("我们试试递归吧。")]),s._v(" "),n("p",[s._v("我们可以看到，当我们的函数对一个部门求和时，有两种可能的情况：")]),s._v(" "),n("ul",[n("li",[n("ol",[n("li",[s._v("要么是由一 "),n("strong",[s._v("数组")]),s._v(" 的人组成的“简单”的部门 —— 这样我们就可以通过一个简单的循环来计算薪资的总和。")])])]),s._v(" "),n("li",[n("ol",{attrs:{start:"2"}},[n("li",[s._v("或者它是一个有 "),n("code",[s._v("N")]),s._v(" 个子部门的 "),n("strong",[s._v("对象")]),s._v(" —— 那么我们可以通过 "),n("code",[s._v("N")]),s._v(" 层递归调用来求每一个子部门的薪资，然后将它们合并起来。")])])])]),s._v(" "),n("p",[s._v("第一种情况是由一数组的人组成的部门，这种情况很简单，是最基础的递归。")]),s._v(" "),n("p",[s._v("第二种情况是我们得到的是对象。那么可将这个复杂的任务拆分成适用于更小部门的子任务。它们可能会被继续拆分，但很快或者不久就会拆分到第一种情况那样。")]),s._v(" "),n("p",[s._v("这个算法从代码来看可能会更简单：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" company "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 是同一个对象，简洁起见被压缩了")]),s._v("\n  sales"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'John'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Alice'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1600")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  development"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    sites"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Peter'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Alex'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1800")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    internals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Jack'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1300")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用来完成任务的函数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sumSalaries")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("department")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("department"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 情况（1）")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" department"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("reduce")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" current")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("salary"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 求数组的和")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 情况（2）")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" subdep "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("values")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("department"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sumSalaries")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subdep"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 递归调用所有子部门，对结果求和")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sumSalaries")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("company"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 7700")]),s._v("\n")])]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("代码很短也容易理解（希望是这样？）。这就是递归的能力。它适用于任何层次的子部门嵌套。")]),s._v(" "),n("p",[s._v("下面是调用图：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(682),alt:""}})]),s._v(" "),n("p",[s._v("我们可以很容易地看到其原理：对于对象 "),n("code",[s._v("{...}")]),s._v(" 会生成子调用，而数组 "),n("code",[s._v("[...]")]),s._v(" 是递归树的“叶子”，它们会立即给出结果。")]),s._v(" "),n("p",[s._v("请注意，该代码使用了我们之前讲过的智能特性（smart features）：")]),s._v(" "),n("ul",[n("li",[s._v("在 "),n("router-link",{attrs:{to:"/learn_javascript_asdiasdkc/one/wergfhgfhk/05/"}},[s._v("数组方法")]),s._v(" 中我们介绍过的数组求和方法 "),n("code",[s._v("arr.reduce")]),s._v("。")],1),s._v(" "),n("li",[s._v("使用循环 "),n("code",[s._v("for(val of Object.values(obj))")]),s._v(" 遍历对象的（属性）值："),n("code",[s._v("Object.values")]),s._v(" 返回它们组成的数组。")])]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"递归结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递归结构","aria-hidden":"true"}},[s._v("#")]),s._v(" 递归结构")]),s._v(" "),n("p",[s._v("递归（递归定义的）数据结构是一种部分复制自身的结构。")]),s._v(" "),n("p",[s._v("我们刚刚在上面的公司结构的示例中看过了它。")]),s._v(" "),n("p",[s._v("一个公司的 "),n("strong",[s._v("部门")]),s._v(" 是：")]),s._v(" "),n("ul",[n("li",[s._v("一数组的人。")]),s._v(" "),n("li",[s._v("或一个 "),n("strong",[s._v("部门")]),s._v(" 对象。")])]),s._v(" "),n("p",[s._v("对于 Web 开发者而言，有更熟知的例子：HTML 和 XML 文档。")]),s._v(" "),n("p",[s._v("在 HTML 文档中，一个 "),n("strong",[s._v("HTML 标签")]),s._v(" 可能包括以下内容：")]),s._v(" "),n("ul",[n("li",[s._v("文本片段。")]),s._v(" "),n("li",[s._v("HTML 注释。")]),s._v(" "),n("li",[s._v("其它 "),n("strong",[s._v("HTML 标签")]),s._v("（它有可能又包括文本片段、注释或其它标签等）。")])]),s._v(" "),n("p",[s._v("这又是一个递归定义。")]),s._v(" "),n("p",[s._v("为了更好地理解递归，我们再讲一个递归结构的例子“链表”，在某些情况下，它可能是优于数组的选择。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h3",{attrs:{id:"链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#链表","aria-hidden":"true"}},[s._v("#")]),s._v(" 链表")]),s._v(" "),n("p",[s._v("想象一下，我们要存储一个有序的对象列表。")]),s._v(" "),n("p",[s._v("正常的选择会是一个数组：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("……但是用数组有个问题。“删除元素”和“插入元素”的操作代价非常大。例如，"),n("code",[s._v("arr.unshift(obj)")]),s._v(" 操作必须对所有元素重新编号以便为新的元素 "),n("code",[s._v("obj")]),s._v(" 腾出空间，而且如果数组很大，会很耗时。"),n("code",[s._v("arr.shift()")]),s._v(" 同理。")]),s._v(" "),n("p",[s._v("唯一对数组结构做修改而不需要大量重排的操作就是对数组末端的操作："),n("code",[s._v("arr.push/pop")]),s._v("。因此，对于大队列来说，当我们必须对数组首端的元素进行操作时，数组会很慢。（译注：此处的首端操作其实指的是在尾端以外的数组内的元素进行插入/删除操作。）")]),s._v(" "),n("br"),s._v(" "),n("p",[s._v("如果我们确实需要快速插入/删除，则可以选择另一种叫做 "),n("code",[s._v("链表")]),s._v(" 的数据结构。")]),s._v(" "),n("p",[n("strong",[s._v("链表元素")]),s._v(" 是一个使用以下元素通过递归定义的对象：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("value")]),s._v("。")]),s._v(" "),n("li",[n("code",[s._v("next")]),s._v(" 属性引用下一个 "),n("strong",[s._v("链表元素")]),s._v(" 或者代表末尾的 "),n("code",[s._v("null")]),s._v("。")])]),s._v(" "),n("p",[s._v("例如：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("链表的图形表示：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(683),alt:""}})]),s._v(" "),n("p",[s._v("一段用来创建链表的代码：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("在这儿我们可以清楚地看到，这里有很多个对象，每一个都有 "),n("code",[s._v("value")]),s._v(" 和指向邻居的 "),n("code",[s._v("next")]),s._v("。变量 "),n("code",[s._v("list")]),s._v(" 是链条中的第一个对象，因此顺着 "),n("code",[s._v("next")]),s._v(" 指针，我们可以抵达任何元素。")]),s._v(" "),n("p",[s._v("该链表可以很容易被拆分为多个部分，然后再重新组装回去：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" secondList "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("img",{attrs:{src:a(684),alt:""}})]),s._v(" "),n("p",[s._v("合并：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" secondList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("当然，我们可以在任何位置插入或移除元素。")]),s._v(" "),n("p",[s._v("比如，要添加一个新值，我们需要更新链表的头：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" list "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将新值添加到链表头部")]),s._v("\nlist "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"new item"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" list "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("img",{attrs:{src:a(685),alt:""}})]),s._v(" "),n("p",[s._v("要从中间删除一个值，可以修改前一个元素的 "),n("code",[s._v("next")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:a(686),alt:""}})]),s._v(" "),n("p",[s._v("我们让 "),n("code",[s._v("list.next")]),s._v(" 从 "),n("code",[s._v("1")]),s._v(" 跳到值 "),n("code",[s._v("2")]),s._v("。现在值 "),n("code",[s._v("1")]),s._v(" 就被从链表中移除了。如果它没有被存储在其它任何地方，那么它会被自动从内存中删除。")]),s._v(" "),n("p",[s._v("与数组不同，链表没有大规模重排，我们可以很容易地重新排列元素。")]),s._v(" "),n("p",[s._v("当然，链表也不总是优于数组的。不然大家就都去使用链表了。")]),s._v(" "),n("p",[s._v("链表主要的缺点就是我们无法很容易地通过元素的编号获取元素。但在数组中却很容易："),n("code",[s._v("arr[n]")]),s._v(" 是一个直接引用。而在链表中，我们需要从起点元素开始，顺着 "),n("code",[s._v("next")]),s._v(" 找 "),n("code",[s._v("N")]),s._v(" 次才能获取到第 N 个元素。")]),s._v(" "),n("p",[s._v("……但是我们也并不是总需要这样的操作。比如，当我们需要一个队列甚至一个 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Double-ended_queue",target:"_blank",rel:"noopener noreferrer"}},[s._v("双向队列"),n("OutboundLink")],1),s._v(" —— 有序结构必须可以快速地从两端添加/移除元素，但是不需要访问的元素。")]),s._v(" "),n("p",[s._v("链表可以得到增强：")]),s._v(" "),n("ul",[n("li",[s._v("我们可以在 "),n("code",[s._v("next")]),s._v(" 之外，再添加 "),n("code",[s._v("prev")]),s._v(" 属性来引用前一个元素，以便轻松地往回移动。")]),s._v(" "),n("li",[s._v("我们还可以添加一个名为 "),n("code",[s._v("tail")]),s._v(" 的变量，该变量引用链表的最后一个元素（并在从末尾添加/删除元素时对该引用进行更新）。")]),s._v(" "),n("li",[s._v("……数据结构可能会根据我们的需求而变化。")])]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("术语：")]),s._v(" "),n("ul",[n("li",[n("p",[n("strong",[s._v("递归")]),s._v(" 是编程的一个术语，表示从自身调用函数（译注：也就是自调用）。递归函数可用于以更优雅的方式解决问题。")]),s._v(" "),n("p",[s._v("当一个函数调用自身时，我们称其为 "),n("strong",[s._v("递归步骤")]),s._v("。递归的 "),n("strong",[s._v("基础")]),s._v(" 是函数参数使任务简单到该函数不再需要进行进一步调用。")])]),s._v(" "),n("li",[n("p",[n("a",{attrs:{href:"http://en.wikipedia.org/wiki/Recursive_data_type",target:"_blank",rel:"noopener noreferrer"}},[s._v("递归定义"),n("OutboundLink")],1),s._v(" 的数据结构是指可以使用自身来定义的数据结构。")]),s._v(" "),n("p",[s._v("例如，链表可以被定义为由对象引用一个列表（或 null）而组成的数据结构。")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("  list "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" list "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("像 HTML 元素树或者本章中的 "),n("code",[s._v("department")]),s._v(" 树等，本质上也是递归：它们有分支，而且分支又可以有其他分支。")]),s._v(" "),n("p",[s._v("就像我们在示例 "),n("code",[s._v("sumSalary")]),s._v(" 中看到的那样，可以使用递归函数来遍历它们。")])])]),s._v(" "),n("p",[s._v("任何递归函数都可以被重写为迭代（译注：也就是循环）形式。有时这是在优化代码时需要做的。但对于大多数任务来说，递归方法足够快，并且容易编写和维护。")]),s._v(" "),n("br"),s._v(" "),n("br"),s._v(" "),n("br")])},[],!1,null,null,null);t.default=e.exports},681:function(s,t,a){s.exports=a.p+"assets/img/recursion-pow.1815b8cd.svg"},682:function(s,t,a){s.exports=a.p+"assets/img/recursive-salaries.6fae9a9a.svg"},683:function(s,t,a){s.exports=a.p+"assets/img/linked-list.d1ed4dbd.svg"},684:function(s,t,a){s.exports=a.p+"assets/img/linked-list-split.edac31d8.svg"},685:function(s,t,a){s.exports=a.p+"assets/img/linked-list-0.a5eb9ce8.svg"},686:function(s,t,a){s.exports=a.p+"assets/img/linked-list-remove-1.ef997225.svg"}}]);